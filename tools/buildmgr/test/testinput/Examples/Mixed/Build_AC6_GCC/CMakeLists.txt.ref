# CMSIS Build CMakeLists generated on 2021-03-30T09:47:11

cmake_minimum_required(VERSION 3.22)

# Target options

set(TARGET Build_AC6_GCC)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC")
set(OUT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/OutDir")
set(INT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(AS_FLAGS_GLOBAL "--gdwarf-2 -mthumb")
set(CC_FLAGS_GLOBAL "-O -Wall -gdwarf-2 -mapcs-frame -mthumb")
set(LD_FLAGS_GLOBAL "--entry=Reset_Handler --specs=nosys.specs -mthumb")
set(LD_SCRIPT "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/Device/ARMCM3/gcc_arm.ld")

set(DEFINES
  ARMCM3
  _RTE_
)

set(INC_PATHS
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/Core/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/Device/ARM/ARMCM3/Include"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/CMSIS"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/_Build.Simulation"
)

set(ASM_SRC_FILES
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/GCC/irq_cm3.S"
)

set(CC_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/CMSIS/RTX_Config.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/Source/os_systick.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_delay.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_evflags.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_evr.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_kernel.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_lib.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_memory.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_mempool.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_msgqueue.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_mutex.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_semaphore.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_system.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_thread.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.7.0/CMSIS/RTOS2/RTX/Source/rtx_timer.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/Device/ARMCM3/startup_ARMCM3.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/RTE/Device/ARMCM3/system_ARMCM3.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/Mixed/Build_AC6_GCC/Main.c"
)

# Toolchain config map

set(REGISTERED_TOOLCHAIN_ROOT "C:/Compilers/GCC/10.3.1/bin")
set(REGISTERED_TOOLCHAIN_VERSION "10.3.1")
set(TOOLCHAIN_VERSION_MIN "9.2.1")
include ("C:/sandbox/cbuild/etc/GCC.10.3.1.cmake")
include ("C:/sandbox/cbuild/etc/CMSIS-Build-Utils.cmake")

# Setup project

project(${TARGET} LANGUAGES ASM C)
cbuild_get_running_toolchain(TOOLCHAIN_ROOT TOOLCHAIN_VERSION C)

# Global Flags

set(CMAKE_ASM_FLAGS "${ASM_CPU} ${ASM_BYTE_ORDER} ${ASM_DEFINES} ${ASM_FLAGS} ${AS_FLAGS_GLOBAL}")
set(CMAKE_C_FLAGS "${CC_CPU} ${CC_BYTE_ORDER} ${CC_DEFINES} ${CC_SECURE} ${CC_FLAGS} ${CC_FLAGS_GLOBAL} ${CC_SYS_INC_PATHS}")
set(CMAKE_C_LINK_FLAGS "${LD_CPU} ${_LS}\"${LD_SCRIPT}\" ${LD_SECURE} ${LD_FLAGS_GLOBAL} ${LD_FLAGS}")

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_executable(${TARGET} ${ASM_SRC_FILES} ${CC_SRC_FILES})
set_target_properties(${TARGET} PROPERTIES PREFIX "" OUTPUT_NAME "${TARGET}")
set_target_properties(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR} LINK_DEPENDS ${LD_SCRIPT})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})
