# CMSIS Build CMakeLists generated on 2022-09-14T16:17:31

cmake_minimum_required(VERSION 3.18)

# Target options

set(TARGET Project)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3")
set(OUT_DIR "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/OutDir")
set(INT_DIR "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(OPTIMIZE size)
set(DEBUG on)
set(WARNINGS on)
set(LD_SCRIPT "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/Device/ARMCM3/gcc_arm.ld")

set(DEFINES
  ARMCM3
  _RTE_
)

set(DEBUG_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_1.c "off")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_1.c "size")
set(DEBUG_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_2.c "off")
set(WARNINGS_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_2.c "off")
set(DEBUG_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_4.cpp "off")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_4.cpp "none")
set(WARNINGS_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_4.cpp "off")
set(DEBUG_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_3.s "off")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_3.s "none")
set(WARNINGS_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_3.s "off")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_2.c "none")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/Device/ARMCM3/startup_ARMCM3.c "none")
set(OPTIMIZE_C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/Device/ARMCM3/system_ARMCM3.c "none")

set(INC_PATHS
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/_Project"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/ARMCM3/Include"
)

set(AS_GNU_SRC_FILES
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_3.s"
)

set(CC_SRC_FILES
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_1.c"
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_2.c"
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/Device/ARMCM3/startup_ARMCM3.c"
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/RTE/Device/ARMCM3/system_ARMCM3.c"
)

set(CXX_SRC_FILES
  "C:/Sandbox/devtools-external/build/testoutput/GCC/TranslationControl/Project3/File_4.cpp"
)

# Toolchain config map

include ("C:/Sandbox/devtools-external/build/testoutput/cbuild/etc/GCC.11.2.1.cmake")

# Setup project

project(${TARGET} LANGUAGES AS_GNU C CXX)

# Global Flags

set(CMAKE_AS_GNU_FLAGS "${AS_GNU_CPU} ${AS_GNU_BYTE_ORDER} ${AS_GNU_DEFINES} ${AS_GNU_FLAGS}")
set(CMAKE_C_FLAGS "${CC_CPU} ${CC_BYTE_ORDER} ${CC_DEFINES} ${CC_SECURE} ${CC_FLAGS} ${CC_SYS_INC_PATHS}")
set(CMAKE_CXX_FLAGS "${CXX_CPU} ${CXX_BYTE_ORDER} ${CXX_DEFINES} ${CXX_SECURE} ${CXX_FLAGS} ${CXX_SYS_INC_PATHS}")
set(CMAKE_CXX_LINK_FLAGS "${LD_CPU} ${_LS}\"${LD_SCRIPT}\" ${LD_SECURE} ${LD_OPTIONS_FLAGS} ${LD_FLAGS}")

# Local Flags

foreach(SRC ${AS_GNU_SRC_FILES})
  set_source_files_properties(${SRC} PROPERTIES LANGUAGE AS_GNU)
endforeach()

# File Includes, Defines and Options

foreach(SRC ${AS_GNU_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  foreach(OPTION OPTIMIZE DEBUG WARNINGS)
    if(DEFINED ${OPTION}_${S})
      set(${OPTION}_LOCAL "${${OPTION}_${S}}")
    else()
      set(${OPTION}_LOCAL "${${OPTION}}")
    endif()
  endforeach()
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  cbuild_set_options_flags(AS_GNU "${OPTIMIZE_LOCAL}" "${DEBUG_LOCAL}" "${WARNINGS_LOCAL}" FILE_FLAGS)
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${CC_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  foreach(OPTION OPTIMIZE DEBUG WARNINGS)
    if(DEFINED ${OPTION}_${S})
      set(${OPTION}_LOCAL "${${OPTION}_${S}}")
    else()
      set(${OPTION}_LOCAL "${${OPTION}}")
    endif()
  endforeach()
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  cbuild_set_options_flags(CC "${OPTIMIZE_LOCAL}" "${DEBUG_LOCAL}" "${WARNINGS_LOCAL}" FILE_FLAGS)
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${CXX_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  foreach(OPTION OPTIMIZE DEBUG WARNINGS)
    if(DEFINED ${OPTION}_${S})
      set(${OPTION}_LOCAL "${${OPTION}_${S}}")
    else()
      set(${OPTION}_LOCAL "${${OPTION}}")
    endif()
  endforeach()
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  cbuild_set_options_flags(CXX "${OPTIMIZE_LOCAL}" "${DEBUG_LOCAL}" "${WARNINGS_LOCAL}" FILE_FLAGS)
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_executable(${TARGET} ${AS_GNU_SRC_FILES} ${CC_SRC_FILES} ${CXX_SRC_FILES})
set(CMAKE_EXECUTABLE_SUFFIX ${EXE_SUFFIX})
set_target_properties(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR} LINK_DEPENDS ${LD_SCRIPT})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})

# Bin and Hex Conversion

add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2HEX})
add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2BIN})
