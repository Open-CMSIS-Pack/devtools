# CMSIS Build CMakeLists generated on 2022-04-07T11:33:13

cmake_minimum_required(VERSION 3.18)

# Target options

set(TARGET Project)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence")
set(OUT_DIR "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/OutDir")
set(INT_DIR "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(AS_FLAGS_GLOBAL "-AS-flag-C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0")
set(CC_FLAGS_GLOBAL "-O -Wall -gdwarf-2 -mapcs-frame -mthumb -C-flag-C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0")
set(LD_FLAGS_GLOBAL "--entry=Reset_Handler --specs=nosys.specs -mcpu=cortex-m3 -LD-flag-C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0")
set(LD_SCRIPT "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/Device/ARMCM3/gcc_arm.ld")
set(OUT_NAME Project)
set(HEX_FILE "${OUT_NAME}.hex")
set(BIN_FILE "${OUT_NAME}.bin")

set(DEFINES
  ARMCM3
  _RTE_
  DEF1Target
  DEF2Target
  DEF3Target
  DEF4Target
)

set(DEFINES_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File.c
  ARMCM3
  _RTE_
  DEF1Target
  DEF2Target
  DEF3Target
  DEF4Target
  DEF1GROUP
  DEF2GROUP
  DEF3GROUP
  DEF4GROUP
  DEF1FILE
  DEF2FILE
)

set(DEFINES_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File2.cpp
  ARMCM3
  _RTE_
  DEF1Target
  DEF2Target
  DEF3Target
  DEF4Target
  DEF1FILE
  DEF2FILE
  DEF3FILE
  DEF4FILE
)

set(DEFINES_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/Device/ARMCM3/startup_ARMCM3.c
  ARMCM3
  _RTE_
  DEF1Target
  DEF2Target
  DEF3Target
  DEF4Target
  DEF1COMP
  DEF2COMP
  DEF3COMP
  DEF4COMP
)

set(DEFINES_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/Device/ARMCM3/system_ARMCM3.c
  ARMCM3
  _RTE_
  DEF1Target
  DEF2Target
  DEF3Target
  DEF4Target
  DEF1COMP
  DEF2COMP
  DEF3COMP
  DEF4COMP
)

set(INC_PATHS
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/_Project"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/Device/ARM/ARMCM3/Include"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0"
)

set(INC_PATHS_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File.c
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/_Project"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/Device/ARM/ARMCM3/Include"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/inc1"
  "C:/Users/user1/AppData/Local/Arm/Packs"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/inc"
)

set(INC_PATHS_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File2.cpp
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/_Project"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/Device/ARM/ARMCM3/Include"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence"
  "C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/inc1"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/inc2"
  "C:/Users/user1/AppData/Local/Arm/Packs"
)

set(CC_SRC_FILES
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File.c"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/Device/ARMCM3/startup_ARMCM3.c"
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/RTE/Device/ARMCM3/system_ARMCM3.c"
)

set(CXX_SRC_FILES
  "C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File2.cpp"
)

set(CC_FLAGS_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File.c "-O -Wall -gdwarf-2 -mapcs-frame -mthumb -C-flag-C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0 -C-File-flag-C:/Users/user1/AppData/Local/Arm/Packs")
set(CXX_FLAGS_C:/Temp/devtools/tools/buildmgr/test/testinput/Examples/GCC/AccessSequence/File2.cpp "-O3 -CXX-File-C:/Users/user1/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0")

# Toolchain config map

include ("C:/Temp/devtools/build/testoutput/cbuild/etc/GCC.10.2.1.cmake")

# Setup project

project(${TARGET} LANGUAGES C CXX)

# Global Flags

set(CMAKE_C_FLAGS "${CC_CPU} ${CC_BYTE_ORDER} ${CC_DEFINES} ${CC_SECURE} ${CC_FLAGS} ${CC_SYS_INC_PATHS}")
set(CMAKE_CXX_FLAGS "${CXX_CPU} ${CXX_BYTE_ORDER} ${CXX_DEFINES} ${CXX_SECURE} ${CXX_FLAGS} ${CXX_SYS_INC_PATHS}")
set(CMAKE_CXX_LINK_FLAGS "${LD_CPU} ${_LS}\"${LD_SCRIPT}\" ${LD_SECURE} ${LD_FLAGS_GLOBAL} ${LD_FLAGS}")

# Local Flags

foreach(SRC ${CC_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED CC_FLAGS_${S})
    set(CC_FLAGS_LOCAL "${CC_FLAGS_${S}}")
  else()
    set(CC_FLAGS_LOCAL "${CC_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${CC_FLAGS_LOCAL}")
endforeach()

foreach(SRC ${CXX_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED CXX_FLAGS_${S})
    set(CXX_FLAGS_LOCAL "${CXX_FLAGS_${S}}")
  else()
    set(CXX_FLAGS_LOCAL "${CXX_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${CXX_FLAGS_LOCAL}")
endforeach()

# File Includes and Defines

foreach(SRC ${CC_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED INC_PATHS_${S})
    set(INC_PATHS_LOCAL "${INC_PATHS_${S}}")
    set_source_files_properties(${SRC} PROPERTIES INCLUDE_DIRECTORIES "${INC_PATHS_LOCAL}")
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(CC DEFINES_${S})
    get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
    if(FILE_FLAGS STREQUAL "NOTFOUND")
      set(FILE_FLAGS)
    endif()
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
    set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
  endif()
endforeach()

foreach(SRC ${CXX_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED INC_PATHS_${S})
    set(INC_PATHS_LOCAL "${INC_PATHS_${S}}")
    set_source_files_properties(${SRC} PROPERTIES INCLUDE_DIRECTORIES "${INC_PATHS_LOCAL}")
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(CXX DEFINES_${S})
    get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
    if(FILE_FLAGS STREQUAL "NOTFOUND")
      set(FILE_FLAGS)
    endif()
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
    set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
  endif()
endforeach()

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_executable(${TARGET} ${CC_SRC_FILES} ${CXX_SRC_FILES})
set_target_properties(${TARGET} PROPERTIES PREFIX "" SUFFIX "${EXE_SUFFIX}" OUTPUT_NAME "${TARGET}")
set_target_properties(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR} LINK_DEPENDS ${LD_SCRIPT})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})

# Bin and Hex Conversion

add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2HEX})
add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2BIN})
