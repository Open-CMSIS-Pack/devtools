# CMSIS Build CMakeLists generated on 2021-06-30T14:11:24

cmake_minimum_required(VERSION 3.18)

# Target options

set(TARGET Project)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath")
set(OUT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/OutDir")
set(INT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(CC_FLAGS_GLOBAL "-O -Wall -gdwarf-2 -mapcs-frame -mthumb")
set(LD_FLAGS_GLOBAL "--entry=Reset_Handler --specs=nosys.specs -mcpu=cortex-m3 -mthumb")
set(LD_SCRIPT "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/RTE/Device/ARMCM3/gcc_arm.ld")

set(DEFINES
  ARMCM3
  _RTE_
  DEF1
  DEF2=2
)

set(INC_PATHS
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/RTE/_Project"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/Device/ARM/ARMCM3/Include"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/inc"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/inc2"
)

set(CC_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/File.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/RTE/Device/ARMCM3/startup_ARMCM3.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/RTE/Device/ARMCM3/system_ARMCM3.c"
)

set(CC_FLAGS_C:/sandbox/devtools/build/TestOutput/TestData/Examples/GCC/RelativePath/File.c "-O -Wall -gdwarf-2 -mapcs-frame -mthumb")

# Toolchain config map

include ("C:/sandbox/devtools/build/TestOutput/cbuild/etc/GCC.10.2.1.cmake")

# Setup project

project(${TARGET} LANGUAGES C)

# Global Flags

set(CMAKE_C_FLAGS "${CC_CPU} ${CC_BYTE_ORDER} ${CC_DEFINES} ${CC_SECURE} ${CC_FLAGS} ${CC_SYS_INC_PATHS}")
set(CMAKE_C_LINK_FLAGS "${LD_CPU} ${LD_SCRIPT} ${LD_SECURE} ${LD_FLAGS_GLOBAL} ${LD_FLAGS}")

# Local Flags

foreach(SRC ${CC_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED CC_FLAGS_${S})
    set(CC_FLAGS_LOCAL "${CC_FLAGS_${S}}")
  else()
    set(CC_FLAGS_LOCAL "${CC_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${CC_FLAGS_LOCAL}")
endforeach()

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_executable(${TARGET} ${CC_SRC_FILES})
set(CMAKE_EXECUTABLE_SUFFIX ${EXE_SUFFIX})
set_target_properties(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})

# Bin and Hex Conversion

add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2HEX})
add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${ELF2BIN})
