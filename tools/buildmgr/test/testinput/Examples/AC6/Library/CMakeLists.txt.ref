# CMSIS Build CMakeLists generated on 2021-07-06T15:21:29

cmake_minimum_required(VERSION 3.22)

# Target options

set(TARGET calc)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library")
set(OUT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library/OutDir")
set(INT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(CXX_FLAGS_GLOBAL "-O1 -Wno-documentation -Wno-documentation-unknown-command -Wno-license-management -Wno-missing-noreturn -Wno-missing-prototypes -Wno-missing-variable-declarations -Wno-nonportable-include-path -Wno-packed -Wno-parentheses-equality  -Wno-reserved-id-macro -Wno-sign-conversion -Wno-unused-macros -ffunction-sections -fno-exceptions -fno-rtti -fshort-enums -fshort-wchar -funsigned-char -std=c++11 -xc++")

set(DEFINES
  ARMCM3
  _RTE_
)

set(INC_PATHS
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/Device/ARM/ARMCM3/Include"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library/RTE/_project"
)

set(CXX_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Library/calc.cpp"
)

# Toolchain config map

set(REGISTERED_TOOLCHAIN_ROOT "C:/Compilers/AC6/6.18.0/bin")
set(REGISTERED_TOOLCHAIN_VERSION "6.18.0")
set(TOOLCHAIN_VERSION_MIN "6.0.0")
set(TOOLCHAIN_VERSION_MAX "6.99.99")
include ("C:/sandbox/cbuild/etc/AC6.6.18.0.cmake")
include ("C:/sandbox/cbuild/etc/CMSIS-Build-Utils.cmake")

# Setup project

project(${TARGET} LANGUAGES CXX)

cbuild_get_running_toolchain(TOOLCHAIN_ROOT TOOLCHAIN_VERSION CXX)

# Global Flags

cbuild_get_system_includes(CXX_SYS_INC_PATHS_LIST CXX_SYS_INC_PATHS)
set(CMAKE_CXX_FLAGS "${CXX_CPU} ${CXX_BYTE_ORDER} ${CXX_DEFINES} ${CXX_SECURE} ${CXX_FLAGS} ${CXX_FLAGS_GLOBAL} ${CXX_SYS_INC_PATHS}")
set(CMAKE_CXX_LINK_FLAGS "${LD_CPU} ${LD_SECURE} ${LD_FLAGS}")

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_library(${TARGET} ${CXX_SRC_FILES})
set_target_properties(${TARGET} PROPERTIES PREFIX "" OUTPUT_NAME "${TARGET}")
set_target_properties(${TARGET} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${OUT_DIR})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})
