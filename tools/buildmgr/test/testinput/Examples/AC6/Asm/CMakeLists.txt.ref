# CMSIS Build CMakeLists generated on 2021-07-05T10:53:33

cmake_minimum_required(VERSION 3.22)

# Target options

set(TARGET Blinky)
set(CPU Cortex-M3)
set(PRJ_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm")
set(OUT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/OutDir")
set(INT_DIR "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/IntDir")
set(FPU NO_FPU)
set(DSP NO_DSP)
set(TZ NO_TZ)
set(SECURE Non-secure)
set(MVE NO_MVE)
set(BYTE_ORDER Little-endian)
set(AS_FLAGS_GLOBAL "-gdwarf-3 -masm=auto")
set(CC_FLAGS_GLOBAL "-Wno-documentation -Wno-documentation-unknown-command -Wno-license-management -Wno-missing-noreturn -Wno-missing-prototypes -Wno-missing-variable-declarations -Wno-nonportable-include-path -Wno-packed -Wno-parentheses-equality  -Wno-reserved-id-macro -Wno-sign-conversion -Wno-unused-macros -ffunction-sections -fno-rtti -fshort-enums -fshort-wchar -funsigned-char -gdwarf-3 -std=c99 -xc")
set(LD_FLAGS_GLOBAL "--callgraph --entry=Reset_Handler --info sizes --info summarysizes --info totals --info unused --info veneers --load_addr_map_info --map --strict --summary_stderr --symbols --xref")
set(LD_SCRIPT "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/Device/ARMCM3/ARMCM3_ac6.sct")

set(DEFINES
  ARMCM3
  _RTE_
)

set(DEFINES_C:/WORK/devtools-external-wip/build/tools/buildmgr/test/integrationtests/testdata/Examples/AC6/Asm/AsmArm.s
  ARMCM3
  _RTE_
  HEXADECIMAL_TEST=0xABCDEF
  DECIMAL_TEST=1234567890
  STRING_TEST="String0"
)

set(INC_PATHS
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/CMSIS"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/_Target"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/Core/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Include"
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/Device/ARM/ARMCM3/Include"
)

set(ASM_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/PreProcessed.S"
)

set(AS_ARM_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/ArmSyntax.s"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/Auto.s"
)

set(AS_GNU_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/GnuSyntax.s"
)

set(AS_LEG_SRC_FILES
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/AsmArm.s"
)

set(CC_SRC_FILES
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_lib.c"
  "C:/Users/Test/AppData/Local/Arm/Packs/Keil/ARM_Compiler/1.6.3/Source/retarget_io.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/Blinky.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/CMSIS/RTX_Config.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/Device/ARMCM3/startup_ARMCM3.c"
  "C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/RTE/Device/ARMCM3/system_ARMCM3.c"
)

set(LIB_FILES
  "C:/Users/Test/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Library/ARM/RTX_CM3.lib"
)

set(AS_FLAGS_C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/ArmSyntax.s "-gdwarf-3 -masm=armasm")
set(AS_FLAGS_C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/GnuSyntax.s "-gdwarf-3 -masm=gnu")
set(AS_FLAGS_C:/sandbox/devtools/build/TestOutput/TestData/Examples/AC6/Asm/AsmArm.s "--xref -g")

# Toolchain config map

set(REGISTERED_TOOLCHAIN_ROOT "C:/Compilers/AC6/6.18.0/bin")
set(REGISTERED_TOOLCHAIN_VERSION "6.18.0")
set(TOOLCHAIN_VERSION_MIN "6.0.0")
set(TOOLCHAIN_VERSION_MAX "6.99.99")
include ("C:/sandbox/cbuild/etc/AC6.6.18.0.cmake")
include ("C:/sandbox/cbuild/etc/CMSIS-Build-Utils.cmake")

# Setup project

project(${TARGET} LANGUAGES ASM AS_ARM AS_GNU AS_LEG C)

cbuild_get_running_toolchain(TOOLCHAIN_ROOT TOOLCHAIN_VERSION C)

# Global Flags

set(CMAKE_ASM_FLAGS "${ASM_CPU} ${ASM_BYTE_ORDER} ${ASM_FLAGS}")
set(CMAKE_AS_ARM_FLAGS "${AS_ARM_CPU} ${AS_ARM_BYTE_ORDER} ${AS_ARM_FLAGS}")
set(CMAKE_AS_GNU_FLAGS "${AS_GNU_CPU} ${AS_GNU_BYTE_ORDER} ${AS_GNU_FLAGS}")
set(CMAKE_AS_LEG_FLAGS "${AS_LEG_CPU} ${AS_LEG_BYTE_ORDER} ${AS_LEG_FLAGS}")
cbuild_get_system_includes(CC_SYS_INC_PATHS_LIST CC_SYS_INC_PATHS)
set(CMAKE_C_FLAGS "${CC_CPU} ${CC_BYTE_ORDER} ${CC_SECURE} ${CC_FLAGS} ${CC_FLAGS_GLOBAL} ${CC_SYS_INC_PATHS}")
set(CMAKE_C_LINK_FLAGS "${LD_CPU} ${_LS}\"${LD_SCRIPT}\" ${LD_SECURE} ${LD_FLAGS_GLOBAL} ${LD_FLAGS}")

# Local Flags

foreach(SRC ${ASM_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED AS_FLAGS_${S})
    set(AS_FLAGS_LOCAL "${AS_FLAGS_${S}}")
  else()
    set(AS_FLAGS_LOCAL "${AS_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${AS_FLAGS_LOCAL}")
  set_source_files_properties(${SRC} PROPERTIES LANGUAGE ASM)
endforeach()

foreach(SRC ${AS_ARM_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED AS_FLAGS_${S})
    set(AS_FLAGS_LOCAL "${AS_FLAGS_${S}}")
  else()
    set(AS_FLAGS_LOCAL "${AS_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${AS_FLAGS_LOCAL}")
  set_source_files_properties(${SRC} PROPERTIES LANGUAGE AS_ARM)
endforeach()

foreach(SRC ${AS_GNU_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED AS_FLAGS_${S})
    set(AS_FLAGS_LOCAL "${AS_FLAGS_${S}}")
  else()
    set(AS_FLAGS_LOCAL "${AS_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${AS_FLAGS_LOCAL}")
  set_source_files_properties(${SRC} PROPERTIES LANGUAGE AS_GNU)
endforeach()

foreach(SRC ${AS_LEG_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  if(DEFINED AS_FLAGS_${S})
    set(AS_FLAGS_LOCAL "${AS_FLAGS_${S}}")
  else()
    set(AS_FLAGS_LOCAL "${AS_FLAGS_GLOBAL}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${AS_FLAGS_LOCAL}")
  set_source_files_properties(${SRC} PROPERTIES LANGUAGE AS_LEG)
endforeach()

# File Includes, Defines and Options

foreach(SRC ${ASM_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(ASM DEFINES_${S})
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
  else()
    string(APPEND FILE_FLAGS " ${ASM_DEFINES}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${AS_ARM_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(AS_ARM DEFINES_${S})
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
  else()
    string(APPEND FILE_FLAGS " ${AS_ARM_DEFINES}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${AS_GNU_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(AS_GNU DEFINES_${S})
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
  else()
    string(APPEND FILE_FLAGS " ${AS_GNU_DEFINES}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${AS_LEG_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(AS_LEG DEFINES_${S})
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
  else()
    string(APPEND FILE_FLAGS " ${AS_LEG_DEFINES}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

foreach(SRC ${CC_SRC_FILES})
  string(REPLACE " " "?" S ${SRC})
  get_source_file_property(FILE_FLAGS ${SRC} COMPILE_FLAGS)
  if(FILE_FLAGS STREQUAL "NOTFOUND")
    set(FILE_FLAGS)
  endif()
  if(DEFINED DEFINES_${S})
    cbuild_set_defines(CC DEFINES_${S})
    string(APPEND FILE_FLAGS " ${DEFINES_${S}}")
  else()
    string(APPEND FILE_FLAGS " ${CC_DEFINES}")
  endif()
  set_source_files_properties(${SRC} PROPERTIES COMPILE_FLAGS "${FILE_FLAGS}")
endforeach()

# Compilation Database

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(database COMMAND ${CMAKE_COMMAND} -E copy_if_different "${INT_DIR}/compile_commands.json" "${OUT_DIR}")

# Setup Target

add_executable(${TARGET} ${ASM_SRC_FILES} ${AS_ARM_SRC_FILES} ${AS_GNU_SRC_FILES} ${AS_LEG_SRC_FILES} ${CC_SRC_FILES})
set_target_properties(${TARGET} PROPERTIES PREFIX "" OUTPUT_NAME "${TARGET}")
set_target_properties(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR} LINK_DEPENDS ${LD_SCRIPT})
target_include_directories(${TARGET} PUBLIC ${INC_PATHS})
target_link_libraries(${TARGET} ${LIB_FILES})
