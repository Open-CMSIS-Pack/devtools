{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/Open-CMSIS-Pack/devtools/schemas/projmgr/2.6.0/tools/projmgr/schemas/common.schema.json",
  "title": "CMSIS common",
  "description": "common and reusable properties from other schemas",
  "version": "2.6.0",
  "definitions": {
    "ArrayOfStrings": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "BuildContext": {
      "type": "string",
      "pattern": "^(((^[.][a-zA-Z0-9_-]{1,32})|(^[+][a-zA-Z0-9_-]{1,32}))|((^[.][a-zA-Z0-9_-]{1,32})[+][a-zA-Z0-9_-]{1,32}|(^[+][a-zA-Z0-9_-]{1,32})[.][a-zA-Z0-9_-]{1,32})|((\\^|\\\\(\\.|\\+)).*))$"
    },
    "BuildContextWithProjectName": {
      "type": "string",
      "pattern": "^([^\\.\\+]+|[^\\.\\+]*\\.[a-zA-Z0-9_-]{1,32}(\\+[a-zA-Z0-9_-]{1,32})|[^\\.\\+]*\\+[a-zA-Z0-9_-]{1,32}(\\.[a-zA-Z0-9_-]{1,32})?)$"
    },
    "ArrayOfContextMapAlternativeContext": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ContextMapAlternativeContext" }
    },
    "ContextMapAlternativeContext": {
      "type": "string",
      "pattern": "^[^\\.\\+]*(\\.[a-zA-Z0-9_-]{1,32}|\\+[a-zA-Z0-9_-]{1,32}|\\.[a-zA-Z0-9_-]{1,32}\\+[a-zA-Z0-9_-]{1,32})$"
    },
    "ArrayOfBuildContext": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildContext" }
    },
    "BuildSetContextsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildSetContextType" }
    },
    "BuildSetContextType": {
      "type": "object",
      "properties": {
        "context": { "$ref": "#/definitions/BuildContextWithProjectName" }
      },
      "required": [ "context" ],
      "additionalProperties": false
    },
    "ConditionIDType": {
      "type": "string"
    },
    "ForType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Include node for a list of [.<build-type>][+<target-type>]"
    },
    "NotForType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Exclude node for a list of [.<build-type>][+<target-type>]"
    },
    "TypeListMutualExclusion": {
      "oneOf": [
        { 
          "required": ["for-context"],
          "not": {"required": ["not-for-context"]}
        },
        { 
          "required": ["not-for-context"],
          "not": {"required": ["for-context"]}
        },
        {
          "allOf": [
            { "not": {"required": ["for-context"] }},
            { "not": {"required": ["not-for-context"]}}
          ]
        }
      ]
    },
    "ForContext": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Include node for a list of [.<build-type>][+<target-type>]"
    },
    "NotForContext": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Exclude node for a list of [.<build-type>][+<target-type>]"
    },
    "SelectCompilersType": {
      "type": "array",
      "minItems": 1,
      "description": "List tested compilers that can be selected",
      "items": { "$ref": "#/definitions/SelectCompilerType" }
    },
    "SelectCompilerType": {
      "type": "object",
      "properties": {
        "compiler": { "$ref": "#/definitions/CompilerType" }
      }
    },
    "CompilerType": {
      "type": "string",
      "pattern": "^(GCC|CLANG|AC6|IAR)(@(>=)?([0-9]+\\.[0-9]+\\.[0-9]+((\\+|\\-)[a-zA-Z0-9_\\.\\+-]+)?))?$",
      "description": "Selection of the toolchain used in the project (GCC, CLANG, AC6, IAR), optionally with version, for example AC6@6.16.0"
    },
    "ConsumesProvidesType": {
      "oneOf": [
        {"type": "string" },
        {"type": "object", "additionalProperties": {"type": "number"}}
      ]
    },
    "VariablesType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {"type": "object", "additionalProperties": {"type": "string"}}
    },
    "VersionType": {
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
      "description": "A version consists of 3 mandatory and 2 optional sections: MAJOR.MINOR.PATCH[-Pre Release][+Build Metadata]"
    },
    "ArrayOfCompilerType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/CompilerType" }
    },
    "CompilersType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfCompilerType" },
        {"$ref": "#/definitions/CompilerType" }
      ],
      "description": "Include node for a list of compilers"
    },
    "ArrayOfBuildContextWithProjectName": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildContextWithProjectName" }
    },
    "ContextMapType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfContextMapAlternativeContext" },
        {"$ref": "#/definitions/ContextMapAlternativeContext" }
      ],
      "description": "Remapping of build contexts"
    },
    "DeviceType": {
      "type": "string",
      "pattern": "^(([ -9;-~]+::)?[ -9;-~]+)?(:[ -9;-~]+)?$",
      "description": "Unique device name optionally preceded by device vendor in the format [[vendor::]device][:processor]. A unique processor identifier is required in case of devices with multiple processors, even if the device is implicitly inferred from the board. If both board and device fields are present the given device overrules the device inferred from the board setting."
    },
    "BoardType": {
      "type": "string",
      "pattern": "^([ -9;-~]+::)?[ -9;-~]+(:[ -9;-~]+)?$",
      "description": "Unique board name, optionally preceded by board vendor and succeeded by board revision string, in the format [vendor::]board[:revision]"
    },
    "OptimizeType": {
      "enum": [ "size", "speed", "balanced", "none", "debug" ],
      "description": "Generic optimize levels (size, speed, balanced, none, debug) for code generation."
    },
    "DebugType": {
      "enum": [ "on", "off" ],
      "description": "Generic control for the generation of debug information (on, off)."
    },
    "WarningsType": {
      "enum": [ "on", "off", "all" ],
      "description": "Control warnings (on, off, all)."
    },
    "LanguageCType": {
      "enum": [ "c90", "gnu90", "c99", "gnu99", "c11", "gnu11", "c17", "gnu17", "c23", "gnu23" ],
      "description": "Language standard for C (c90, gnu90, c99, gnu99, c11, gnu11, c17, gnu17, c23, gnu23)."
    },
    "LanguageCppType": {
      "enum": [ "c++98", "gnu++98", "c++03", "gnu++03", "c++11", "gnu++11", "c++14", "gnu++14", "c++17", "gnu++17", "c++20", "gnu++20", "c++23", "gnu++23" ],
      "description": "Language standard for C++ (c++98, gnu++98, c++03, gnu++03, c++11, gnu++11, c++14, gnu++14, c++17, gnu++17, c++20, gnu++20, c++23, gnu++23)."
    },
    "PLMStatusType": {
      "enum": [ "missing file", "missing base", "update suggested", "update recommended", "update required" ],
      "description": "PLM Status of component configuration file"
    },
    "ArrayOfArtifactType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ArtifactType" }
    },
    "ArtifactType": {
      "enum": [ "elf", "hex", "bin", "lib", "cmse-lib", "map" ],
      "description": "Output type: elf (default), hex, bin, lib, cmse-lib or map"
    },
    "ArtifactsType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfArtifactType" },
        {"$ref": "#/definitions/ArtifactType" }
      ]
    },
    "OutputType": {
      "type": "object",
      "minProperties": 1,
      "properties": {
        "base-name": { "type": "string", "description": "Base name for all output files" },
        "type": { "$ref": "#/definitions/ArtifactsType" }
      },
      "additionalProperties": false
    },
    "OutputDirectoriesType": {
      "type": "object",
      "properties": {
        "intdir":   { "type": "string" },
        "outdir":   { "type": "string" },
        "tmpdir":   { "type": "string" },
        "cprjdir":  { "type": "string" }
      },
      "additionalProperties": false
    },
    "BuildOutputDirectoriesType": {
      "type": "object",
      "properties": {
        "rtedir":   { "type": "string" },
        "intdir":   { "type": "string" },
        "outdir":   { "type": "string" },
        "cprjdir":  { "type": "string" }
      },
      "additionalProperties": false
    },
    "OutputFileType": {
      "type": "object",
      "properties": {
        "file": { "type": "string" },
        "type": { "$ref": "#/definitions/ArtifactsType" }
      },
      "additionalProperties": false,
      "required": [ "file", "type" ]
    },
    "OutputFilesType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/OutputFileType" }
    },
    "DefinesType": {
      "type": "array",
      "description": "List of #define symbol settings for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "key": { "type": "string" },
              "value": { "type": ["number", "string"], "minLength": 1 }
            }
          },
          {
            "type": "string",
            "pattern": "^([^=:]+)$"
          }
        ]
      }
    },
    "BuildDefinesType": {
      "type": "array",
      "description": "List of #define symbol settings for the code generation.",
      "uniqueItems": false,
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "key": { "type": "string" },
              "value": { "type": ["number", "string"], "minLength": 1 }
            }
          },
          {
            "type": "string",
            "pattern": "^([^=:]+)$"
          }
        ]
      }
    },
    "UndefinesType": {
      "type": "array",
      "description": "List of #define symbol settings to be removed for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "AddpathsType": {
      "type": "array",
      "description": "List of include path settings for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "DelpathsType": {
      "type": "array",
      "description": "List of include path settings to be removed for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "MiscTypes": {
      "oneOf": [
        {
          "type": "array",
          "description": "List of miscellaneous literal tool-specific controls that are passed directly to the tools depending on the file type",
          "uniqueItems": true,
          "minItems": 1,
          "items": { "$ref": "#/definitions/MiscType" }
        },
        { "$ref": "#/definitions/MiscType" }
      ]
    },
    "MiscType": {
      "type": ["object", "null"],
      "properties": {
        "for-compiler": { "$ref": "#/definitions/CompilerType" },
        "C":            { "$ref": "#/definitions/ArrayOfStrings", "description": "List of C flags" },
        "CPP":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of CPP flags" },
        "C-CPP":        { "$ref": "#/definitions/ArrayOfStrings", "description": "List of C & CPP flags" },
        "ASM":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of ASM flags"  },
        "Link":         { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags" },
        "Link-C":       { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for pure C project" },
        "Link-CPP":     { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for project with C++ files" },
        "Library":      { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for libraries handling" },
        "Lib":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Library Manager or Archiver flags" }
      },
      "additionalProperties": false
    },
    "InstancesType": {
      "type": "integer",
      "description": "Allows to add multiple instances of a component."
    },
    "TargetTypes": {
      "type": "array",
      "description": "Target type declaration list that allow to switch among different targets.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/TargetType" }
    },
    "TargetType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^([a-zA-Z0-9_-]{1,32})$",
          "description": "Name of the target type."
        },
        "board":        { "$ref": "#/definitions/BoardType" },
        "device":       { "$ref": "#/definitions/DeviceType" },
        "processor":    { "$ref": "#/definitions/ProcessorType" },
        "compiler":     { "$ref": "#/definitions/CompilerType" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "language-C":   { "$ref": "#/definitions/LanguageCType" },
        "language-CPP": { "$ref": "#/definitions/LanguageCppType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "variables":    { "$ref": "#/definitions/VariablesType" },
        "context-map":  { "$ref": "#/definitions/ContextMapType" }
      },
      "additionalProperties": false,
      "required" : [ "type"]
    },
    "BuildTypes": {
      "type": "array",
      "description": "Build type declaration list that allow to switch among different build settings such as: Release, Debug, Test.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildType" }
    },
    "BuildType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^([a-zA-Z0-9_-]{1,32})$",
          "description": "Name of build configuration type. (Debug | Test | Release)"
        },
        "processor":    { "$ref": "#/definitions/ProcessorType" },
        "compiler":     { "$ref": "#/definitions/CompilerType" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "language-C":   { "$ref": "#/definitions/LanguageCType" },
        "language-CPP": { "$ref": "#/definitions/LanguageCppType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "variables":    { "$ref": "#/definitions/VariablesType" },
        "context-map":  { "$ref": "#/definitions/ContextMapType" }
      },
      "additionalProperties": false,
      "required" : [ "type"]
    },
    "ProjectsType": {
      "type": "array",
      "description": "This section defines the collection of related projects",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ProjectType" }
    },
    "ProjectType": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "pattern": "^.*[/]([^.+]*\\.cproject\\.(yml|yaml))$|^([^.+]+)\\.cproject\\.(yml|yaml)$",
          "description": "Path to the valid project file"
        },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "additionalProperties": false,
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion"},
        { "required": [ "project" ] }
      ]
    },
    "ProcessorTrustzone": {
      "enum": [ "secure", "secure-only", "non-secure", "off" ],
      "description": "Select TrustZone mode: secure | secure-only | non-secure | off"
    },
    "ProcessorFpu": {
      "enum": [ "dp", "sp", "off" ],
      "description": "Controls usage of FPU registers (S-Registers that are used for Helium and FPU hardware): dp (double precision) | sp (single precision) | off (disabled)"
    },
    "BuildProcessorFpu": {
      "enum": [ "on", "dp", "sp", "off" ],
      "description": "Controls usage of FPU registers (S-Registers that are used for Helium and FPU hardware): on (enabled) | dp (double precision) | sp (single precision) | off (disabled)"
    },
    "ProcessorDsp": {
      "enum": [ "on", "off" ],
      "description": "Controls usage of DSP: on (enabled) | off (disabled)"
    },
    "ProcessorMve": {
      "enum": [ "fp", "int", "off" ],
      "description": "Controls usage of M-Profile Vector Extension Instructions: fp (floating point and integer instructions) | int (integer instructions) | off (disabled)"
    },
    "ProcessorEndian": {
      "enum": [ "little", "big" ],
      "description": "Controls endianess: little | big"
    },
    "ProcessorBranchProtection": {
      "enum": [ "bti", "bti-signret", "off" ],
      "description": "Select Branch Protection mode: bti (branch target identification) | bit-signret (branch target identification and pointer authentication) | off (disabled)"
    },
    "ProcessorType": {
      "type": ["object", "null"],
      "description": "Processor specific settings",
      "properties": {
        "trustzone": { "$ref": "#/definitions/ProcessorTrustzone" },
        "fpu": { "$ref": "#/definitions/ProcessorFpu" },
        "dsp": { "$ref": "#/definitions/ProcessorDsp" },
        "mve": { "$ref": "#/definitions/ProcessorMve" },
        "endian": { "$ref": "#/definitions/ProcessorEndian" },
        "branch-protection": { "$ref": "#/definitions/ProcessorBranchProtection" }
      },      
      "additionalProperties": false
    },
    "BuildProcessorType": {
      "type": ["object", "null"],
      "description": "Processor specific settings",
      "properties": {
        "trustzone": { "$ref": "#/definitions/ProcessorTrustzone" },
        "fpu": { "$ref": "#/definitions/BuildProcessorFpu" },
        "dsp": { "$ref": "#/definitions/ProcessorDsp" },
        "mve": { "$ref": "#/definitions/ProcessorMve" },
        "endian": { "$ref": "#/definitions/ProcessorEndian" },
        "branch-protection": { "$ref": "#/definitions/ProcessorBranchProtection" },
        "core": {"type": "string", "description": "Processor core"}
      },      
      "additionalProperties": false
    },
    "GroupsType": {
      "type": "array",
      "description": "List of source groups to be added to a project or layer.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GroupType" }
    },
    "GroupType": {
      "type": "object",
      "properties": {
        "group":           { "type": "string", "description": "Name of the group." },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "groups":          { "$ref": "#/definitions/GroupsType" },
        "files":           { "$ref": "#/definitions/FilesType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "anyOf": [
            {"required" : ["files"]},
            {"required" : ["groups"]}
          ]
        }
      ],
      "additionalProperties": false
    },
    "BuildGroupsType": {
      "type": "array",
      "description": "List of source groups.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildGroupType" }
    },
    "BuildGroupType": {
      "type": "object",
      "properties": {
        "group":           { "type": "string", "description": "Name of the group." },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "groups":          { "$ref": "#/definitions/BuildGroupsType" },
        "files":           { "$ref": "#/definitions/FilesType" }
      },
      "additionalProperties": false
    },
    "FilesType": {
      "type": "array",
      "description": "List of source files to be added to a project or layer.",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/FileType" }
    },
    "FileCategoryType": {
      "enum": [ "api", "doc", "header", "headerAsm", "headerC", "headerCpp", "headerLd", "include", "includeAsm", "includeC", "includeCpp", "includeLd", "library", "object", "source", "sourceC", "sourceCpp", "sourceAsm", "linkerScript", "utility", "image", "preIncludeGlobal", "preIncludeLocal","genSource", "genHeader", "genParams", "genAsset", "other" ],
      "description": "File category types define the use of component files within the application. Typically, these files are added to the project and processed by the build tools."
    },
    "FileAttributeType": {
      "enum": [ "config", "template" ],
      "description": "The file attribute defines the special handling in the project when being used as configuration or template file."
    },
    "FileLanguageType": {
      "enum": [ "asm", "c", "cpp", "c-cpp", "link" ],
      "description": "File language attribute type defines the language for source, header and include file categories. Based on the language the information is used by language specific build tools."
    },
    "FileScopeType": {
      "enum": [ "visible", "hidden", "public", "private" ],
      "description": "File scope attribute type defines the visibility of header file and include path file categories. Based on the specified scope header files are visible or hidden and include paths are public or private."
    },

    "FileType": {
      "type": "object",
      "properties": {
        "file":            { "type": "string", "description": "File name along with the path." },
        "category":        { "$ref": "#/definitions/FileCategoryType" },
        "attr":            { "$ref": "#/definitions/FileAttributeType" },
        "language":        { "$ref": "#/definitions/FileLanguageType" },
        "scope":           { "$ref": "#/definitions/FileScopeType" },
        "version":         { "$ref": "#/definitions/VersionType" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "select":          { "type": "string", "description": "Description and purpose of the file" },
        "base":            { "type": "string", "description": "Current configuration file with version" },
        "update":          { "type": "string", "description": "New configuration file used for merge utility" },
        "status":          { "$ref": "#/definitions/PLMStatusType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "file" ] }
      ],
      "additionalProperties": false
    },
    "GeneratorsType": {
      "type": "array",
      "description": "Information for calling generators",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GeneratorType" }
    },
    "GeneratorType": {
      "description": "General generator info",
      "type": "object",
      "properties": {
        "from-pack": { "$ref": "#/definitions/PackID" },
        "generator": { "type": "string", "description": "Section for a specific generator" },
        "path":      { "type": "string", "description": "Path name for storing the files generated" },
        "gpdsc":     { "type": "string", "description": "File name of the *.GDPSC file that stores the information in path" },
        "command":   { "$ref": "#/definitions/CommandType" }
      },
      "required": [ "generator", "path", "gpdsc", "command" ]
    },
    "CommandType": {
      "type": "object",
      "description": "Section for invoking the generator on different Host operating systems",
      "properties": {
        "win":   { "$ref": "#/definitions/HostSpecificCommand" },
        "linux": { "$ref": "#/definitions/HostSpecificCommand" },
        "mac":   { "$ref": "#/definitions/HostSpecificCommand" },
        "other": { "$ref": "#/definitions/HostSpecificCommand" }
      }
    },
    "HostSpecificCommand": {
      "type": "object",
      "description": "Command for one of the supported host types (Windows, Linux, Mac or other)",
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the executable"
        },
        "arguments": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Arguments passed when executing the command"
        }
      }
    },
    "ComponentGeneratorType": {
      "description": "Component specific generator info. Any field in this object overrides the corresponding value from the general GeneratorType",
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Generator identifier" },
        "path": { "type": "string", "description": "Path name for storing the files generated" },
        "from-pack": { "$ref": "#/definitions/PackID"},
        "files": { "$ref": "#/definitions/FilesType" }
      },
      "required": [ "id" ]
    },
    "ComponentID": {
      "type": "string",
      "pattern": "(^[A-Za-z0-9][a-zA-Z0-9_\\+()'\\/\\- \\.]+$)|(^([A-Za-z0-9][A-Za-z0-9 \\-]+::)?([A-Za-z0-9][a-zA-Z0-9_\\+()'\\/\\- \\.]+)(&[A-Za-z0-9][a-zA-Z0-9_\\+()'\\/\\- \\.]+)?(:[A-Za-z0-9][a-zA-Z0-9_\\+()'\\/\\- \\.]+)(:[A-Za-z0-9][a-zA-Z0-9_\\+():\\/\\- \\.]*)?(&[A-Za-z0-9][a-zA-Z0-9_\\+()'\\/\\- \\.]+)?(@(>=)?((0|[1-9][0-9]*)\\.([0-9]+)(\\.([0-9]+))?(\\-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?))?$)",
      "description": "Name of the software component. It can be a free text or a component identifier in the format [Cvendor::] Cclass [&Cbundle] :Cgroup [:Csub] [&Cvariant] [@[>=]Cversion]"
    },
    "ComponentsType": {
      "type": "array",
      "description": "List of software components to be added in a project or layer.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ComponentType" }
    },
    "ComponentType": {
      "type": "object",
      "properties": {
        "component":       { "$ref": "#/definitions/ComponentID" },
        "condition":       { "$ref": "#/definitions/ConditionIDType" },
        "from-pack":       { "$ref": "#/definitions/PackID"},
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "instances":       { "$ref": "#/definitions/InstancesType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "component" ] }
      ],
      "additionalProperties": false
    },
    "RteType": {
      "type": ["object", "null"],
      "description": "Allows to control the directory structure for RTE (run-time environment) files",
      "properties": {
        "base-dir": {
          "type": "string",
          "description": "Base directory for RTE files; default: $ProjectDir()$/RTE"
        }
      },
      "additionalProperties": false
    },
    "GeneratorsOutputType": {
      "type": ["object", "null"],
      "description": "Allows to control the directory structure for generator output files",
      "properties": {
        "base-dir": {
          "type": "string",
          "description": "Base directory for unspecified generators; default: $ProjectDir()$/generated"
        },
        "options": { "$ref": "#/definitions/GeneratorOptionsType" }
      },
      "additionalProperties": false
    },
    "GeneratorOptionsType": {
      "type": "array",
      "description": "Specific generator options; allows explicit directory configuration for a generator",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GeneratorOptionType" }
    },
    "GeneratorOptionType": {
      "type": ["object", "null"],
      "properties": {
        "generator": {
          "type": "string",
          "description": "Identifier of the generator tool, specified with id in the generators element of the PDSC file"
        },
        "path":  {
          "type": "string",
          "description": "Specifies the directory for generated files. Relative paths used the location of the yml file as base directory"
        },
        "name":  {
          "type": "string",
          "description": "Specifies the base name of the generator import file, typically used for a board layer"
        },
        "map":  {
          "type": "string",
          "description": "Mapping of the csolution project to a generator specific run-time context name"
        }
      },
      "additionalProperties": false,
      "required": [ "generator" ]
    },
    "LayersType": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/LayerType" }
    },
    "LayerType": {
      "type": "object",
      "properties": {
        "layer": {
          "type": "string",
          "description": "Path to the '*.clayer.yml' file that defines the layer"
        },
        "type": {
          "type": "string",
          "description": "Layer type for compatible layers matching"
        },
        "optional": {
          "type": "boolean",
          "description": "Set optional to 'false' to require the layer type when searching compatible layers; default: 'true'"
        },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "anyOf": [
            { "required": ["layer"], "not": {"required": ["optional"]} },
            { "required": ["type"]  }
          ]
        }
      ],
      "additionalProperties": false
    },
    "DefaultDescType": {
      "type": "object",
      "properties": {
        "compiler":        { "$ref": "#/definitions/CompilerType", "description": "'compiler' setting in cdefault.yml will be deprecated in CMSIS-Toolbox 3.0.0" },
        "select-compiler": { "$ref": "#/definitions/SelectCompilersType", "description": "'select-compiler' setting in cdefault.yml will be deprecated in CMSIS-Toolbox 3.0.0" },
        "misc":            { "$ref": "#/definitions/MiscTypes" }
      },
      "additionalProperties": false
    },
    "SolutionDescType": {
      "type": "object",
      "properties": {
        "description":     { "type": "string" },
        "target-types":    { "$ref": "#/definitions/TargetTypes" },
        "build-types":     { "$ref": "#/definitions/BuildTypes" },
        "output-dirs":     { "$ref": "#/definitions/OutputDirectoriesType" },
        "packs":           { "$ref": "#/definitions/PacksType" },
        "projects":        { "$ref": "#/definitions/ProjectsType" },
        "processor":       { "$ref": "#/definitions/ProcessorType" },
        "compiler":        { "$ref": "#/definitions/CompilerType" },
        "select-compiler": { "$ref": "#/definitions/SelectCompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "variables":       { "$ref": "#/definitions/VariablesType" },
        "created-by": {
          "$ref": "#/definitions/CreatedInfoType",
          "description": " The tool that creates this csolution project"
        },
        "created-for": {
          "$ref": "#/definitions/CreatedInfoType",
          "description": "The tool required to build this csolution project"
        },
        "cdefault":    { "type": "null", "description": "Enable use of cdefault.yml file" },
        "generators":  { "$ref": "#/definitions/GeneratorsOutputType" },
        "executes":    { "$ref": "#/definitions/ExecutesType" }
      },
      "additionalProperties": false,
      "required": [ "target-types", "projects" ]
    },
    "ProjectDescType": {
      "type": ["object", "null"],
      "properties": {
        "description":  { "type": "string" },
        "packs":        { "$ref": "#/definitions/PacksType" },
        "output":       { "$ref": "#/definitions/OutputType" },
        "board":        { "$ref": "#/definitions/BoardType" },
        "device":       { "$ref": "#/definitions/DeviceType" },
        "compiler":     { "$ref": "#/definitions/CompilerType" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "language-C":   { "$ref": "#/definitions/LanguageCType" },
        "language-CPP": { "$ref": "#/definitions/LanguageCppType" },
        "processor":    { "$ref": "#/definitions/ProcessorType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "groups":       { "$ref": "#/definitions/GroupsType" },
        "components":   { "$ref": "#/definitions/ComponentsType" },
        "layers":       { "$ref": "#/definitions/LayersType" },
        "setups":       { "$ref": "#/definitions/SetupsType" },
        "connections":  { "$ref": "#/definitions/ConnectionsType" },
        "linker":       { "$ref": "#/definitions/LinkersType" },
        "generators":   { "$ref": "#/definitions/GeneratorsOutputType" },
        "rte":          { "$ref": "#/definitions/RteType" },
        "executes":     { "$ref": "#/definitions/ExecutesType" }
      },
      "additionalProperties": false
    },
    "BuildIdxDescType": {
      "type": "object",
      "properties": {
        "description":  { "type": "string" },
        "generated-by": { "type": "string", "description": "Tool name along with version information used to generate this file" },
        "cdefault": { "type": "string", "description": "Path to cdefault.yml file" },
        "csolution": { "type": "string", "description": "Path to csolution.yml file" },
        "tmpdir": { "type": "string", "description": "Specifies the directory for the interim temporary files" },
        "cprojects": { "$ref": "#/definitions/BuildProjectsType" },
        "cbuilds": { "$ref": "#/definitions/BuildContextsType" },
        "configurations": { "$ref": "#/definitions/BuildConfigurationsType" },
        "select-compiler": { "$ref": "#/definitions/SelectCompilersType" },
        "executes": { "$ref": "#/definitions/BuildExecutesType" },
        "rebuild":  { "type": "boolean", "description": "Flag indicating intermediate files need to be cleaned before the next build" }
      },
      "additionalProperties": false,
      "required": ["generated-by", "csolution", "cprojects"]
    },
    "BuildProjectsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildProjectType", "description": "Paths to cproject.yml files" }
    },
    "BuildProjectType": {
      "type": "object",
      "properties": {
        "cproject": { "type": "string", "description": "Path to cproject.yml file" },
        "clayers": { "$ref": "#/definitions/BuildLayersType" }
      },
      "additionalProperties": false,
      "required": ["cproject"]
    },
    "BuildLayersType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildLayerType", "description": "List of clayers" }
    },
    "BuildLayerType": {
      "type": "object",
      "properties": {
        "clayer": { "type": "string", "description": "Path to clayer.yml file" }
      },
      "additionalProperties": false,
      "required": ["clayer"]
    },
    "BuildContextsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildContextType", "description": "List of context related build information" }
    },
    "BuildContextType": {
      "type": "object",
      "properties": {
        "cbuild": { "type": "string", "description": "Path to <context>.cbuild.yml file" },
        "project": { "type": "string", "description": "Project name" },
        "configuration": { "$ref": "#/definitions/BuildContext" },
        "depends-on": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^([^\\.\\+]+(\\.[a-zA-Z0-9_-]{1,32})?\\+[a-zA-Z0-9_-]{1,32})(-[a-zA-Z0-9_-]{1,32})?|([a-zA-Z0-9_-]{1,32})$"
          }
        },
        "errors": { "type": "boolean", "description": "Indicates error(s) during conversion" },
        "packs-missing": { "$ref": "#/definitions/BuildPacksInfoType", "description": "Names of the missing packs" },
        "packs-unused": { "$ref": "#/definitions/BuildPacksInfoType", "description": "Names of the unused packs" },
        "clayers": { "$ref": "#/definitions/BuildLayersType" },
        "rebuild": { "type": "boolean", "description": "Flag indicating intermediate files need to be cleaned before the next build" },
        "messages": { "$ref": "#/definitions/MessagesType" }
      },
      "additionalProperties": false,
      "required": ["cbuild", "project", "configuration"]
    },
    "BuildConfigurationsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildConfigurationType", "description": "Target specific layer configurations" }
    },
    "BuildConfigurationType": {
      "type": "object",
      "properties": {
        "target-type": { "type": "string", "description": "Name of the target" },
        "target-configurations" : { "$ref": "#/definitions/BuildTargetConfigurationsType" }
      },
      "additionalProperties": false,
      "required": ["target-type", "target-configurations"]
    },
    "BuildTargetConfigurationsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildTargetConfigurationType", "description": "Target compatible configurations" }
    },
    "BuildTargetConfigurationType": {
      "type": "object",
      "properties": {
        "configuration": { "type": "null" },
        "variables": { "$ref": "#/definitions/BuildLayerVariablesType", "description": "List of layer variables" }
      },
      "additionalProperties": false,
      "required": ["configuration", "variables"]
    },
    "BuildLayerVariablesType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildLayerVariableType" }
    },
    "BuildLayerVariableType": {
      "type": "object",
      "patternProperties": {
        "^.*-Layer$":  { "type": "string", "description": "Unique variable name for the layer" },
        "description": { "type": "string", "description": "Brief description text (from *.clayer.yml)" },
        "settings":    { "$ref": "#/definitions/BuildConnectionSettingsType" },
        "path":        { "type": "string", "description": "Path to the directory that contains the layer (from *.PDSC file)" },
        "file":        { "type": "string", "description": "Name of the *.clayer.yml file relative to the directory specified with path (from *.PDSC file)"},
        "copy-to":     { "type": "string", "description": "Proposed directory for the layer in the csolution project (from *.PDSC file)" }
      },
      "additionalProperties": false
    },
    "BuildConnectionSettingsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildConnectionSetType", "description": "List of connection sets" }
    },
    "BuildConnectionSetType": {
      "type": "object",
      "properties": {
        "set": { "type": "string", "description": "Connection set configurations" }
      },
      "additionalProperties": false,
      "required": ["set"]
    },
    "BuildDescType": {
      "description": "The lock info that describes the resolved state of contexts and also can be used as input for generators",
      "type": "object",
      "properties": {
        "generated-by": {
          "type": "string",
          "description": "Tool name along with version information used to generate this application"
        },
        "current-generator": {
          "type": "object",
          "description": "What generator configuration to use",
          "properties": {
            "from-pack": { "$ref": "#/definitions/PackID" },
            "id":        { "type": "string" }
          },
          "additionalProperties": false,
          "required": [ "id" ]
        },
        "solution": {
          "type": "string",
          "description": "Relative path to the csolution file for this context"
        },
        "project": {
          "type": "string",
          "description": "Relative path to the cproject file for this context"
        },
        "context":           { "$ref": "#/definitions/BuildContextWithProjectName" },
        "compiler":          { "$ref": "#/definitions/CompilerType" },
        "board":             { "$ref": "#/definitions/BoardType" },
        "board-pack":        { "$ref": "#/definitions/PackID" },
        "device":            { "$ref": "#/definitions/DeviceType" },
        "device-pack":       { "$ref": "#/definitions/PackID" },
        "processor":         { "$ref": "#/definitions/BuildProcessorType" },
        "packs":             { "$ref": "#/definitions/BuildPacksType" },
        "optimize":          { "$ref": "#/definitions/OptimizeType" },
        "debug":             { "$ref": "#/definitions/DebugType" },
        "warnings":          { "$ref": "#/definitions/WarningsType" },
        "language-C":        { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":      { "$ref": "#/definitions/LanguageCppType" },
        "misc":              { "$ref": "#/definitions/MiscType" },
        "define":            { "$ref": "#/definitions/BuildDefinesType" },
        "define-asm":        { "$ref": "#/definitions/BuildDefinesType" },
        "add-path":          { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":      { "$ref": "#/definitions/AddpathsType" },
        "output-dirs":       { "$ref": "#/definitions/BuildOutputDirectoriesType" },
        "output":            { "$ref": "#/definitions/OutputFilesType" },
        "components":        { "$ref": "#/definitions/ResolvedComponentsType" },
        "apis":              { "$ref": "#/definitions/ResolvedApisType" },
        "linker":            { "$ref": "#/definitions/LinkerType" },
        "groups":            { "$ref": "#/definitions/BuildGroupsType" },
        "generators":        { "$ref": "#/definitions/GeneratorsType" },
        "executes":          { "$ref": "#/definitions/BuildExecutesType" },
        "constructed-files": {
          "type": "array",
          "items": { "$ref": "#/definitions/FileType" }
        },
        "licenses": {
          "type": "array",
          "items": { "$ref": "#/definitions/LicenseInfoType" }
        }
      },
      "additionalProperties": false
    },
    "BuildPacksInfoType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildPackInfoType" }
    },
    "BuildPackInfoType": {
      "type": "object",
      "properties": {
        "pack": { "type": "string", "description": "Name of the missing pack" }
      },
      "additionalProperties": false,
      "required": ["pack"]
    },
    "LayerDescType": {
      "type": "object",
      "description": "This section describes layer contents.",
      "properties": {
        "description": { "type": "string" },
        "type": {
          "type": "string",
          "description": "Layer type for compatible layers matching"
        },
        "for-board":    { "$ref": "#/definitions/BoardType" },
        "for-device":   { "$ref": "#/definitions/DeviceType" },
        "packs":        { "$ref": "#/definitions/PacksType" },
        "board":        { "$ref": "#/definitions/BoardType" },
        "device":       { "$ref": "#/definitions/DeviceType" },
        "compiler":     { "$ref": "#/definitions/CompilerType" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "language-C":   { "$ref": "#/definitions/LanguageCType" },
        "language-CPP": { "$ref": "#/definitions/LanguageCppType" },
        "processor":    { "$ref": "#/definitions/ProcessorType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "groups":       { "$ref": "#/definitions/GroupsType" },
        "components":   { "$ref": "#/definitions/ComponentsType" },
        "connections":  { "$ref": "#/definitions/ConnectionsType" },
        "linker":       { "$ref": "#/definitions/LinkersType" },
        "generators":   { "$ref": "#/definitions/GeneratorsOutputType" }
      },
      "additionalProperties": false
    },
    "LicenseInfoPackType": {
      "type": "object",
      "properties": {
        "pack": { "$ref": "#/definitions/PackID" }
      }
    },
    "LicenseInfoComponentType": {
      "type": "object",
      "properties": {
        "component": { "type": "string" }
      }
    },
    "LicenseInfoType": {
      "type": "object",
      "description": "License information about packs and components",
      "properties": {
        "license": {
          "type": "string",
          "description": "License SPDX name or title"
        },
        "license-agreement": {
          "type": "string",
          "description": "Path to license agreement file"
        },
        "packs": {
          "type": "array",
          "items": { "$ref": "#/definitions/LicenseInfoPackType" }
        },
        "components": {
          "type": "array",
          "description": "List of components or APIs component to license agreement file",
          "items": { "$ref": "#/definitions/LicenseInfoComponentType" }
        }
      }
    },
    "BuildPackDescType": {
      "type": "object",
      "properties": {
        "resolved-packs": { "$ref": "#/definitions/ResolvedPacksType" }
      },
      "additionalProperties": false,
      "required": [ "resolved-packs" ]
    },
    "ResolvedPacksType": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ResolvedPackType" }
    },
    "ResolvedPackType": {
      "type": "object",
      "properties": {
        "resolved-pack": { "$ref": "#/definitions/PackID" },
        "selected-by-pack": {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/PackID" }
        },
        "selected-by": {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/PackID" }
        }
      },
      "additionalProperties": false,
      "required": [ "resolved-pack" ]
    },
    "BuildPacksType": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/BuildPackType" }
    },
    "BuildPackType": {
      "type": "object",
      "properties": {
        "pack": { "$ref": "#/definitions/PackID" },
        "path": { "type": "string", "description": "Path to software pack" }
      },
      "required": [ "pack", "path" ],
      "additionalProperties": false
    },
    "PacksType": {
      "type": "array",
      "uniqueItems": true,
      "items": { 
        "oneOf": [
          {"$ref": "#/definitions/PackType" },
          {"$ref": "#/definitions/PackPathType" }
        ]
      }
    },
    "PackID": {
      "type": "string",
      "pattern": "^([a-zA-Z0-9_ \\.-]+)((::[a-zA-Z0-9_ \\.\\*-]+)(@(>=|\\~|\\^)?([0-9]+\\.[0-9]+\\.[0-9]+((\\+|\\-)[a-zA-Z0-9_\\.\\+-]+)?))?)?$",
      "description": "Name of a required Software Pack in the format Vendor [:: Pack [@[>=|~|^] version]]"
    },
    "VersionlessPackID": {
      "type": "string",
      "pattern": "^([a-zA-Z0-9_ \\.\\-]+)(::[a-zA-Z0-9_ \\.\\*-]+)?$",
      "description": "Name of a required Software Pack in the format Vendor [:: Pack]"
    },
    "PackType": {
      "type": "object",
      "properties": {
        "pack": { "$ref": "#/definitions/PackID" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "pack" ] }
      ],
      "additionalProperties": false
    },
    "PackPathType": {
      "type": "object",
      "properties": {
        "pack": { "$ref": "#/definitions/VersionlessPackID" },
        "path": { "type": "string", "description": "Path to software pack" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "pack", "path" ] }
      ],
      "additionalProperties": false
    },
    "ResolvedComponentsType": {
      "type": "array",
      "description": "List of software components in their resolved state.",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ResolvedComponentType" }
    },
    "ResolvedComponentType": {
      "type": "object",
      "description": "Software component in its resolved state",
      "properties": {
        "component":    { "$ref": "#/definitions/ComponentID" },
        "condition":    { "$ref": "#/definitions/ConditionIDType" },
        "selected-by":  { "$ref": "#/definitions/ComponentID" },
        "implements":   { "$ref": "#/definitions/ComponentID" },
        "rtedir":       { "type": "string" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "language-C":   { "$ref": "#/definitions/LanguageCType" },
        "language-CPP": { "$ref": "#/definitions/LanguageCppType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "files":        { "$ref": "#/definitions/FilesType" },
        "generator":    { "$ref": "#/definitions/ComponentGeneratorType" },
        "from-pack":    { "$ref": "#/definitions/PackID" },
        "instances":    { "$ref": "#/definitions/InstancesType" }
      },
      "additionalProperties": false
    },
    "ResolvedApisType": {
      "type": "array",
      "description": "List of API in their resolved state",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ResolvedApiType" }
    },
    "ResolvedApiType": {
      "type": "object",
      "description": "API in its resolved state",
      "properties": {
        "api":            { "$ref": "#/definitions/ComponentID" },
        "condition":      { "$ref": "#/definitions/ConditionIDType" },
        "implemented-by": { "$ref": "#/definitions/ImplementedByType" },
        "files":          { "$ref": "#/definitions/FilesType" },
        "from-pack":      { "$ref": "#/definitions/PackID" }
      },
      "additionalProperties": false
    },
    "ImplementedByType": {
      "oneOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ComponentID" } },
        { "$ref": "#/definitions/ComponentID" }
      ]
    },
    "SetupsType": {
      "type": "array",
      "description": "List of setup nodes that collects various toolchain options",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/SetupType" }
    },
    "SetupType": {
      "type": "object",
      "properties": {
        "setup":           { "type": "string" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "language-C":      { "$ref": "#/definitions/LanguageCType" },
        "language-CPP":    { "$ref": "#/definitions/LanguageCppType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "define-asm":      { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "output":          { "$ref": "#/definitions/OutputType" },
        "linker":          { "$ref": "#/definitions/LinkersType" },
        "processor":       { "$ref": "#/definitions/ProcessorType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" }
      ],
      "additionalProperties": false
    },
    "ConnectionsType": {
      "description": "List of consumed and provided connections compatibility",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ConnectType" }
    },
    "ConnectType": {
      "type": "object",
      "description": "Group of specific functionality",
      "properties": {
        "connect": {
          "type": "string",
          "description": "Description of specific functionality"
        },
        "set": {
          "type": "string",
          "pattern": "^.+\\..+$",
          "description": "Set configuration option in the format 'config-id.select'"
        },
        "info": {
          "type": "string",
          "description": "Display description when connect is selected"
        },
        "consumes": {
          "type": "array",
          "description": "Consumed connections",
          "items": { "$ref": "#/definitions/ConsumesProvidesType" }
        },
        "provides": {
          "type": "array",
          "description": "Provided connections",
          "items": { "$ref": "#/definitions/ConsumesProvidesType" }
        }
      },
      "additionalProperties": false,
      "required": [ "connect" ]
    },
    "LinkersType": {
      "description": "Linker Scripts and/or memory regions header files",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/LinkerType" }
    },
    "LinkerType": {
      "type": "object",
      "properties": {
        "auto": { "type": "null", "description": "Use automatic linker script generation" },
        "regions": {
          "type": "string",
          "description": "Path and file name of regions_<device_or_board>.h, used to generate a Linker Script"
        },
        "script": {
          "type": "string",
          "description": "Explicit file name of the Linker Script, overrules files provided with file: or components"
        },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" }
      ],
      "additionalProperties": false
    },
    "CreatedInfoType": {
      "type": "string",
      "pattern": "^.*@[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
    },
    "BuildSetDescType": {
      "type": "object",
      "properties": {
        "generated-by": { "type": "string", "description": "Tool name along with version information used to generate this application" },
        "contexts": { "$ref": "#/definitions/BuildSetContextsType", "description": "List of fully specified contexts" },
        "compiler": { "type": "string", "description": "Selection of compiler used" }
      },
      "additionalProperties": false,
      "required": ["generated-by", "contexts"]
    },
    "GeneratorRegistryDescType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GeneratorRegistryType", "description": "List of global generator description" }
    },
    "GeneratorRegistryType": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Generator identifier" },
        "description": { "type": "string", "description": "Generator description" },
        "download-url": { "type": "string", "description": "URL for downloading generator tool" },
        "run": { "type": "string", "description": "Related bridge program" },
        "path": { "type": "string", "description": "Specifies the directory for generated files" }
      },
      "additionalProperties": false,
      "required": ["id", "run", "path"]
    },
    "BuildGenIdxDescType": {
      "type": "object",
      "properties": {
        "generated-by": { "type": "string", "description": "Tool name along with version information used to generate this file" },
        "generators": { "$ref": "#/definitions/BuildGeneratorsType", "description": "List of generators to be run" },
        "compiler": { "type": "string", "description": "Selection of compiler used" }
      },
      "additionalProperties": false,
      "required": ["generated-by", "generators"]
    },
    "BuildGeneratorsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildGeneratorType", "description": "Build Generator solution related information" }
    },
    "BuildGeneratorType": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Generator identifier" },
        "output": { "type": "string", "description": "Specifies the directory for generated files" },
        "board": { "$ref": "#/definitions/BoardType" },
        "device": { "$ref": "#/definitions/DeviceType" },
        "project-type": { "$ref": "#/definitions/BuildGeneratorProjectType" },
        "cbuild-gens": { "$ref": "#/definitions/BuildGeneratorContextsType" }
      },
      "additionalProperties": false,
      "required": ["id", "output", "project-type", "cbuild-gens"]
    },
    "BuildGeneratorProjectType": {
      "enum": [ "single-core", "multi-core", "trustzone" ],
      "description": "Project type (single-core, multi-core, trustzone)."
    },
    "BuildGeneratorContextsType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildGeneratorContextType", "description": "Build Generator context related information" }
    },
    "BuildGeneratorContextType": {
      "type": "object",
      "properties": {
        "cbuild-gen":       { "type": "string", "description": "Path to <context>.cbuild-gen.yml file" },
        "project":          { "type": "string", "description": "Project name" },
        "configuration":    { "$ref": "#/definitions/BuildContext" },
        "for-project-part": { "type": "string", "description": "For project part (secure, non-secure, <processor>)" },
        "name":             { "type": "string", "description": "Explicit name for the *.cgen.yml generator import file" },
        "map":              { "type": "string", "description": "Mapping of the csolution project to a generator specific run-time context name" }
      },
      "additionalProperties": false,
      "required": ["cbuild-gen", "project", "configuration"]
    },
    "GeneratorImportDescType": {
      "type": "object",
      "description": "This section describes generated contents",
      "properties": {
        "generated-by": { "type": "string", "description": "Tool name along with version information used to generate this file" },
        "for-board":    { "$ref": "#/definitions/BoardType" },
        "for-device":   { "$ref": "#/definitions/DeviceType" },
        "packs":        { "$ref": "#/definitions/PacksType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "define-asm":   { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "add-path-asm": { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "groups":       { "$ref": "#/definitions/GroupsType" },
        "components":   { "$ref": "#/definitions/ComponentsType" }
      },
      "additionalProperties": false
    },
    "ExecutesType": {
      "description": "Execute and external command for pre or post build steps",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ExecuteType" }
    },
    "ExecuteType": {
      "type": "object",
      "properties": {
        "execute":         { "type": "string", "pattern": "^([a-zA-Z0-9_-]{1,32})$", "description": "Description of the build step" },
        "run":             { "type": "string", "description": "Command string with name of the program or script (optionally with path) along with argument string" },
        "always":          { "type": "null",   "description": "When present, the build step always runs and bypasses check for outdated files" },
        "input":           { "type": "array",  "description": "A list of input files (may contain Access Sequences)",  "items": { "type": "string"} },
        "output":          { "type": "array",  "description": "A list of output files (may contain Access Sequences)", "items": { "type": "string"} },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "additionalProperties": false,
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion"},
        { "required": ["execute", "run"] }
      ]
    },
    "BuildExecutesType": {
      "description": "Execute and external command for pre or post build steps",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/BuildExecuteType" }
    },
    "BuildExecuteType": {
      "type": "object",
      "properties": {
        "execute":    { "type": "string", "description": "Description of the build step" },
        "run":        { "type": "string", "description": "Command string with name of the program or script (optionally with path) along with argument string" },
        "always":     { "type": "null",   "description": "When present, the build step always runs and bypasses check for outdated files" },
        "input":      { "type": "array",  "description": "A list of input files (may contain Access Sequences)",  "items": { "type": "string"} },
        "output":     { "type": "array",  "description": "A list of output files (may contain Access Sequences)", "items": { "type": "string"} },
        "depends-on": { 
          "type": "array",
          "items": {
              "type": "string",
              "pattern": "^([^\\.\\+]+(\\.[a-zA-Z0-9_-]{1,32})?\\+[a-zA-Z0-9_-]{1,32})(-[a-zA-Z0-9_-]{1,32})?|([a-zA-Z0-9_-]{1,32})$"
            }
          }
      },
      "additionalProperties": false,
      "required": ["execute", "run"]
    },
    "MessagesType": {
      "type": ["object", "null"],
      "description": "Errors, warnings and info messages",
      "properties": {
        "errors":   { "type": "array",  "items": { "type": "string"} },
        "warnings": { "type": "array",  "items": { "type": "string"} },
        "info":     { "type": "array",  "items": { "type": "string"} }
      },      
      "additionalProperties": false
    }    
  }
}
