{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/Open-CMSIS-Pack/devtools/schemas/projmgr/2.0.0-dev0/tools/projmgr/schemas/common.schema.json",
  "title": "CMSIS common",
  "description": "common and reusable properties from other schemas",
  "version": "2.0.0-dev0",
  "definitions": {
    "ArrayOfStrings": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "BuildContext": {
      "type": "string",
      "pattern": "^(((^[.][^.+\\s]*)|(^[+][^.+\\s]*))|((^[.][^.+\\s]*)[+][^.+\\s]*|(^[+][^.+\\s]*)[.][^.+\\s]*))$"
    },
    "BuildContextWithProjectName": {
      "type": "string",
      "pattern": "^([^.+\\s]+|[^.+\\s]*\\.[^.+\\s]+(\\+[^.+\\s]+)?|[^.+\\s]*\\+[^.+\\s]+(\\.[^.+\\s]+)?)$"
    },
    "ArrayOfBuildContext": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildContext" }
    },
    "ConditionIDType": {
      "type": "string"
    },
    "ForType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Include node for a list of [.<build-type>][+<target-type>]"
    },
    "NotForType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Exclude node for a list of [.<build-type>][+<target-type>]"
    },
    "TypeListMutualExclusion": {
      "oneOf": [
        { 
          "required": ["for-context"],
          "not": {"required": ["not-for-context"]}
        },
        { 
          "required": ["not-for-context"],
          "not": {"required": ["for-context"]}
        },
        {
          "allOf": [
            { "not": {"required": ["for-context"] }},
            { "not": {"required": ["not-for-context"]}}
          ]
        }
      ]
    },
    "ForContext": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Include node for a list of [.<build-type>][+<target-type>]"
    },
    "NotForContext": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfBuildContext" },
        {"$ref": "#/definitions/BuildContext" }
      ],
      "description": "Exclude node for a list of [.<build-type>][+<target-type>]"
    },
    "CompilerType": {
      "type": "string",
      "pattern": "^(GCC|AC6|IAR)(@(>=)?(\\d+\\.\\d+\\.\\d+((\\+|\\-)[\\w.+-]+)?))?$",
      "description": "Selection of the toolchain used in the project (GCC, AC6, IAR), optionally with version, for example AC6@6.16.0"
    },
    "ConsumesProvidesType": {
      "oneOf": [
        {"type": "string" },
        {"type": "object", "additionalProperties": {"type": "number"}}
      ]
    },
    "VariablesType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {"type": "object", "additionalProperties": {"type": "string"}}
    },
    "VersionType": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
      "description": "A version consists of 3 mandatory and 2 optional sections: MAJOR.MINOR.PATCH[-Pre Release][+Build Metadata]"
    },
    "ArrayOfCompilerType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/CompilerType" }
    },
    "CompilersType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfCompilerType" },
        {"$ref": "#/definitions/CompilerType" }
      ],
      "description": "Include node for a list of compilers"
    },
    "ArrayOfContextMapType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildContextWithProjectName" }
    },
    "ContextMapType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfContextMapType" },
        {"$ref": "#/definitions/BuildContextWithProjectName" }
      ],
      "description": "Remapping of build contexts"
    },
    "DeviceType": {
      "type": "string",
      "pattern": "^(([ -9;-~]+::)?[ -9;-~]+)?(:[ -9;-~]+)?$",
      "description": "Unique device name optionally preceded by device vendor in the format [[vendor::]device][:processor]. A unique processor identifier is required in case of devices with multiple processors, even if the device is implicitly inferred from the board. If both board and device fields are present the given device overrules the device inferred from the board setting."
    },
    "BoardType": {
      "type": "string",
      "pattern": "^([ -9;-~]+::)?[ -9;-~]+(:[ -9;-~]+)?$",
      "description": "Unique board name, optionally preceded by board vendor and succeeded by board revision string, in the format [vendor::]board[:revision]"
    },
    "OptimizeType": {
      "enum": [ "size", "speed", "balanced", "none" ],
      "description": "Generic optimize levels (size, speed, balanced, none) for code generation."
    },
    "DebugType": {
      "enum": [ "on", "off" ],
      "description": "Generic control for the generation of debug information (on, off)."
    },
    "WarningsType": {
      "enum": [ "on", "off" ],
      "description": "Control warnings (on, off)."
    },
    "ArrayOfArtifactType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ArtifactType" }
    },
    "ArtifactType": {
      "enum": [ "elf", "hex", "bin", "lib" ],
      "description": "Output type: elf (default), hex, bin or lib"
    },
    "ArtifactsType": {
      "oneOf": [
        {"$ref": "#/definitions/ArrayOfArtifactType" },
        {"$ref": "#/definitions/ArtifactType" }
      ]
    },
    "OutputType": {
      "type": "object",
      "properties": {
        "base-name": { "type": "string", "description": "Base name for all output files" },
        "type": { "$ref": "#/definitions/ArtifactsType" }
      },
      "additionalProperties": false,
      "required": ["type"]
    },
    "OutputDirectoriesType": {
      "type": "object",
      "properties": {
        "intdir":   { "type": "string" },
        "outdir":   { "type": "string" },
        "cprjdir":  { "type": "string" }
      },
      "additionalProperties": false
    },
    "BuildOutputDirectoriesType": {
      "type": "object",
      "properties": {
        "rtedir":   { "type": "string" },
        "intdir":   { "type": "string" },
        "outdir":   { "type": "string" },
        "cprjdir":  { "type": "string" }
      },
      "additionalProperties": false
    },
    "OutputFileType": {
      "type": "object",
      "properties": {
        "file": { "type": "string" },
        "type": { "$ref": "#/definitions/ArtifactsType" }
      },
      "additionalProperties": false,
      "required": [ "file", "type" ]
    },
    "OutputFilesType": {
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/OutputFileType" }
    },
    "DefinesType": {
      "type": "array",
      "description": "List of #define symbol settings for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "key": { "type": "string" },
              "value": { "type": ["number", "string"], "minLength": 1 }
            }
          },
          {
            "type": "string",
            "pattern": "^([^=:]+)$"
          }
        ]
      }
    },
    "UndefinesType": {
      "type": "array",
      "description": "List of #define symbol settings to be removed for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "AddpathsType": {
      "type": "array",
      "description": "List of include path settings for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "DelpathsType": {
      "type": "array",
      "description": "List of include path settings to be removed for the code generation.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "type": "string" }
    },
    "MiscTypes": {
      "type": "array",
      "description": "List of miscellaneous literal tool-specific controls that are passed directly to the tools depending on the file type",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/MiscType" }
    },
    "MiscType": {
      "type": ["object", "null"],
      "properties": {
        "for-compiler": { "$ref": "#/definitions/CompilerType" },
        "C":            { "$ref": "#/definitions/ArrayOfStrings", "description": "List of C flags" },
        "CPP":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of CPP flags" },
        "C-CPP":        { "$ref": "#/definitions/ArrayOfStrings", "description": "List of C & CPP flags" },
        "ASM":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of ASM flags"  },
        "Link":         { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags" },
        "Link-C":       { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for pure C project" },
        "Link-CPP":     { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for project with C++ files" },
        "Library":      { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Linker flags for libraries handling" },
        "Lib":          { "$ref": "#/definitions/ArrayOfStrings", "description": "List of Library Manager or Archiver flags" }
      },
      "additionalProperties": false
    },
    "TargetTypes": {
      "type": "array",
      "description": "Target type declaration list that allow to switch among different targets.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/TargetType" }
    },
    "TargetType": {
      "type": "object",
      "properties": {
        "type":       { "type": "string", "description": "Name of the target type." },
        "board":      { "$ref": "#/definitions/BoardType" },
        "device":     { "$ref": "#/definitions/DeviceType" },
        "processor":  { "$ref": "#/definitions/ProcessorType" },
        "compiler":   { "$ref": "#/definitions/CompilerType" },
        "optimize":   { "$ref": "#/definitions/OptimizeType" },
        "debug":      { "$ref": "#/definitions/DebugType" },
        "warnings":   { "$ref": "#/definitions/WarningsType" },
        "define":     { "$ref": "#/definitions/DefinesType" },
        "undefine":   { "$ref": "#/definitions/UndefinesType" },
        "add-path":   { "$ref": "#/definitions/AddpathsType" },
        "del-path":   { "$ref": "#/definitions/DelpathsType" },
        "misc":       { "$ref": "#/definitions/MiscTypes" },
        "variables":  { "$ref": "#/definitions/VariablesType" },
        "context-map":{ "$ref": "#/definitions/ContextMapType" }
      },
      "additionalProperties": false,
      "required" : [ "type"]
    },
    "BuildTypes": {
      "type": "array",
      "description": "Build type declaration list that allow to switch among different build settings such as: Release, Debug, Test.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/BuildType" }
    },
    "BuildType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Name of build configuration type. (Debug | Test | Release)"
        },
        "processor":  { "$ref": "#/definitions/ProcessorType" },
        "compiler":   { "$ref": "#/definitions/CompilerType" },
        "optimize":   { "$ref": "#/definitions/OptimizeType" },
        "debug":      { "$ref": "#/definitions/DebugType" },
        "warnings":   { "$ref": "#/definitions/WarningsType" },
        "define":     { "$ref": "#/definitions/DefinesType" },
        "undefine":   { "$ref": "#/definitions/UndefinesType" },
        "add-path":   { "$ref": "#/definitions/AddpathsType" },
        "del-path":   { "$ref": "#/definitions/DelpathsType" },
        "misc":       { "$ref": "#/definitions/MiscTypes" },
        "variables":  { "$ref": "#/definitions/VariablesType" },
        "context-map":{ "$ref": "#/definitions/ContextMapType" }
      },
      "additionalProperties": false,
      "required" : [ "type"]
    },
    "ProjectsType": {
      "type": "array",
      "description": "This section defines the collection of related projects",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ProjectType" }
    },
    "ProjectType": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "Path to the valid project file"
        },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "additionalProperties": false,
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion"},
        { "required": [ "project" ] }
      ]
    },
    "ProcessorType": {
      "type": ["object", "null"],
      "description": "Processor specific settings",
      "properties": {
        "trustzone": {
          "enum": [ "secure", "non-secure", "off" ],
          "description": "Select TrustZone mode: secure | non-secure | off"
        }
      }
    },
    "BuildProcessorType": {
      "type": ["object", "null"],
      "description": "Processor specific settings",
      "properties": {
        "trustzone": {
          "enum": [ "secure", "non-secure", "off" ],
          "description": "Select TrustZone mode: secure | non-secure | off"
        },
        "fpu": {
          "enum": [ "on", "off" ],
          "description": "Controls usage of FPU registers (S-Registers that are used for Helium and FPU hardware): on | off"
        },
        "endian": {
          "enum": [ "little", "big" ],
          "description": "Controls endianess"
        }
      }
    },
    "GroupsType": {
      "type": "array",
      "description": "List of source groups to be added to a project or layer.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GroupType" }
    },
    "GroupType": {
      "type": "object",
      "properties": {
        "group":           { "type": "string", "description": "Name of the group." },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "groups":          { "$ref": "#/definitions/GroupsType" },
        "files":           { "$ref": "#/definitions/FilesType" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "anyOf": [
            {"required" : ["files"]},
            {"required" : ["groups"]}
          ]
        }
      ],
      "additionalProperties": false
    },
    "FilesType": {
      "type": "array",
      "description": "List of source files to be added to a project or layer.",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/FileType" }
    },
    "FileCategoryType": {
      "enum": [ "doc", "header", "headerAsm", "headerC", "headerCpp", "headerLd", "include", "includeAsm", "includeC", "includeCpp", "includeLd", "library", "object", "source", "sourceC", "sourceCpp", "sourceAsm", "linkerScript", "utility", "image", "preIncludeGlobal", "preIncludeLocal","genSource", "genHeader", "genParams", "genAsset", "other" ],
      "description": "File category types define the use of component files within the application. Typically, these files are added to the project and processed by the build tools."
    },
    "FileAttributeType": {
      "enum": [ "config", "template" ],
      "description": "The file attribute defines the special handling in the project when being used as configuration or template file."
    },
    "FileLanguageType": {
      "enum": [ "asm", "c", "cpp", "c-cpp", "link" ],
      "description": "File language attribute type defines the language for source, header and include file categories. Based on the language the information is used by language specific build tools."
    },
    "FileScopeType": {
      "enum": [ "visible", "hidden", "public", "private" ],
      "description": "File scope attribute type defines the visibility of header file and include path file categories. Based on the specified scope header files are visible or hidden and include paths are public or private."
    },

    "FileType": {
      "type": "object",
      "properties": {
        "file":            { "type": "string", "description": "File name along with the path." },
        "category":        { "$ref": "#/definitions/FileCategoryType" },
        "attr":            { "$ref": "#/definitions/FileAttributeType" },
        "version":         { "$ref": "#/definitions/VersionType" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "file" ] }
      ],
      "additionalProperties": false
    },
    "GeneratorsType": {
      "type": "array",
      "description": "Information for calling generators",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GeneratorType" }
    },
    "GeneratorType": {
      "description": "General generator info",
      "type": "object",
      "properties": {
        "generator": { "type": "string", "description": "Section for a specific generator" },
        "path":      { "type": "string", "description": "Path name for storing the files generated" },
        "gpdsc":     { "type": "string", "description": "File name of the *.GDPSC file that stores the information in path" },
        "command":   { "$ref": "#/definitions/CommandType" }
      },
      "required": [ "generator", "path", "gpdsc", "command" ]
    },
    "CommandType": {
      "type": "object",
      "description": "Section for invoking the generator on different Host operating systems",
      "properties": {
        "win":   { "$ref": "#/definitions/HostSpecificCommand" },
        "linux": { "$ref": "#/definitions/HostSpecificCommand" },
        "mac":   { "$ref": "#/definitions/HostSpecificCommand" },
        "other": { "$ref": "#/definitions/HostSpecificCommand" }
      }
    },
    "HostSpecificCommand": {
      "type": "object",
      "description": "Command for one of the supported host types (Windows, Linux, Mac or other)",
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the executable"
        },
        "arguments": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Arguments passed when executing the command"
        }
      }
    },
    "ComponentGeneratorType": {
      "description": "Component specific generator info. Any field in this object overrides the corresponding value from the general GeneratorType",
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "files": { "$ref": "#/definitions/FilesType" }
      },
      "required": [ "id" ]
    },
    "ComponentID": {
      "type": "string",
      "pattern": "(^[A-Za-z\\d][\\w+()'\\/\\- \\.]+$)|(^([A-Za-z\\d][A-Za-z\\d \\-]+::)?([A-Za-z\\d][\\w+()'\\/\\- \\.]+)(&[A-Za-z\\d][\\w+()'\\/\\- \\.]+)?(:[A-Za-z\\d][\\w+()'\\/\\- \\.]+)(:[A-Za-z\\d][\\w+():\\/\\- \\.]*)?(&[A-Za-z\\d][\\w+()'\\/\\- \\.]+)?(@(>=)?((0|[1-9]\\d*)\\.([\\d]+)(\\.([\\d]+))?(\\-((0|[1-9]\\d*|\\d*[a-zA-Z-][\\da-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][\\da-zA-Z-]*))*))?))?$)",
      "description": "Name of the software component. It can be a free text or a component identifier in the format [Cvendor::] Cclass [&Cbundle] :Cgroup [:Csub] [&Cvariant] [@[>=]Cversion]"
    },
    "ComponentsType": {
      "type": "array",
      "description": "List of software components to be added in a project or layer.",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/ComponentType" }
    },
    "ComponentType": {
      "type": "object",
      "properties": {
        "component":       { "$ref": "#/definitions/ComponentID" },
        "condition":       { "$ref": "#/definitions/ConditionIDType" },
        "from-pack":       { "$ref": "#/definitions/PackID"},
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "warnings":        { "$ref": "#/definitions/WarningsType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "component" ] }
      ],
      "additionalProperties": false
    },
    "GeneratorsOutputType": {
      "type": ["object", "null"],
      "description": "Allows to control the directory structure for generator output files",
      "properties": {
        "base-dir": {
          "type": "string",
          "description": "Base directory for unspecified generators; default: $ProjectDir()$/generated"
        },
        "options": { "$ref": "#/definitions/GeneratorOptionsType" }
      }
    },
    "GeneratorOptionsType": {
      "type": "array",
      "description": "Specific generator options; allows explicit directory configuration for a generator",
      "uniqueItems": true,
      "minItems": 1,
      "items": { "$ref": "#/definitions/GeneratorOptionType" }
    },
    "GeneratorOptionType": {
      "type": ["object", "null"],
      "properties": {
        "generator": {
          "type": "string",
          "description": "Identifier of the generator tool, specified with id in the generators element of the PDSC file"
        },
        "path":  {
          "type": "string",
          "description": "Specifies the directory for generated files. Relative paths used the location of the yml file as base directory"
        }
      }
    },
    "LayersType": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/LayerType" }
    },
    "LayerType": {
      "type": "object",
      "properties": {
        "layer": {
          "type": "string",
          "description": "Path to the '*.clayer.yml' file that defines the layer"
        },
        "type": {
          "type": "string",
          "description": "Layer type for compatible layers matching"
        },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "anyOf": [
            { "required": ["layer"] },
            { "required": ["type"]  }
          ]
        }
      ],
      "additionalProperties": false
    },
    "DefaultDescType": {
      "type": "object",
      "properties": {
        "compiler": {
          "$ref": "#/definitions/CompilerType"
        },
        "misc": { "$ref": "#/definitions/MiscTypes" }
      },
      "additionalProperties": false
    },
    "SolutionDescType": {
      "type": "object",
      "properties": {
        "target-types": { "$ref": "#/definitions/TargetTypes" },
        "build-types":  { "$ref": "#/definitions/BuildTypes" },
        "output-dirs":  { "$ref": "#/definitions/OutputDirectoriesType" },
        "packs":        { "$ref": "#/definitions/PacksType" },
        "projects":     { "$ref": "#/definitions/ProjectsType" },
        "processor":    { "$ref": "#/definitions/ProcessorType" },
        "compiler":     { "$ref": "#/definitions/CompilerType" },
        "optimize":     { "$ref": "#/definitions/OptimizeType" },
        "debug":        { "$ref": "#/definitions/DebugType" },
        "warnings":     { "$ref": "#/definitions/WarningsType" },
        "define":       { "$ref": "#/definitions/DefinesType" },
        "undefine":     { "$ref": "#/definitions/UndefinesType" },
        "add-path":     { "$ref": "#/definitions/AddpathsType" },
        "del-path":     { "$ref": "#/definitions/DelpathsType" },
        "misc":         { "$ref": "#/definitions/MiscTypes" },
        "variables":    { "$ref": "#/definitions/VariablesType" },
        "created-by": {
          "$ref": "#/definitions/CreatedInfoType",
          "description": " The tool that creates this csolution project"
        },
        "created-for": {
          "$ref": "#/definitions/CreatedInfoType",
          "description": "The tool required to build this csolution project"
        },
        "description": { "type": "string" },
        "cdefault":    { "type": "null", "description": "Enable use of cdefault.yml file" },
        "generators":  { "$ref": "#/definitions/GeneratorsOutputType" }
      },
      "additionalProperties": false,
      "required": [ "target-types", "projects" ]
    },
    "ProjectDescType": {
      "type": ["object", "null"],
      "properties": {
        "description": { "type": "string" },
        "packs":       { "$ref": "#/definitions/PacksType" },
        "output":      { "$ref": "#/definitions/OutputType" },
        "output-dirs": { "$ref": "#/definitions/OutputDirectoriesType" },
        "board":       { "$ref": "#/definitions/BoardType" },
        "device":      { "$ref": "#/definitions/DeviceType" },
        "compiler":    { "$ref": "#/definitions/CompilerType" },
        "optimize":    { "$ref": "#/definitions/OptimizeType" },
        "debug":       { "$ref": "#/definitions/DebugType" },
        "warnings":    { "$ref": "#/definitions/WarningsType" },
        "processor":   { "$ref": "#/definitions/ProcessorType" },
        "define":      { "$ref": "#/definitions/DefinesType" },
        "undefine":    { "$ref": "#/definitions/UndefinesType" },
        "add-path":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":    { "$ref": "#/definitions/DelpathsType" },
        "misc":        { "$ref": "#/definitions/MiscTypes" },
        "groups":      { "$ref": "#/definitions/GroupsType" },
        "components":  { "$ref": "#/definitions/ComponentsType" },
        "layers":      { "$ref": "#/definitions/LayersType" },
        "setups":      { "$ref": "#/definitions/SetupsType" },
        "connections": { "$ref": "#/definitions/ConnectionsType" },
        "linker":      { "$ref": "#/definitions/LinkersType" },
        "generators":  { "$ref": "#/definitions/GeneratorsOutputType" }
      },
      "additionalProperties": false
    },
    "BuildDescType": {
      "description": "The lock info that describes the resolved state of contexts and also can be used as input for generators",
      "type": "object",
      "properties": {
        "generated-by": {
          "type": "string",
          "description": "Tool name along with version information used to generate this application"
        },
        "solution": {
          "type": "string",
          "description": "Relative path to the csolution file for this context"
        },
        "project": {
          "type": "string",
          "description": "Relative path to the cproject file for this context"
        },
        "context":           { "$ref": "#/definitions/BuildContextWithProjectName" },
        "compiler":          { "$ref": "#/definitions/CompilerType" },
        "device":            { "$ref": "#/definitions/DeviceType" },
        "processor":         { "$ref": "#/definitions/BuildProcessorType" },
        "packs":             { "$ref": "#/definitions/PacksType" },
        "misc":              { "$ref": "#/definitions/MiscType" },
        "define":            { "$ref": "#/definitions/DefinesType" },
        "add-path":          { "$ref": "#/definitions/AddpathsType" },
        "output-dirs":       { "$ref": "#/definitions/BuildOutputDirectoriesType" },
        "output":            { "$ref": "#/definitions/OutputFilesType" },
        "components":        { "$ref": "#/definitions/ResolvedComponentsType" },
        "linker":            { "$ref": "#/definitions/LinkerType" },
        "groups":            { "$ref": "#/definitions/GroupsType" },
        "generators":        { "$ref": "#/definitions/GeneratorsType" },
        "constructed-files": {
          "type": "array",
          "items": { "$ref": "#/definitions/FileType" }
        }
      },
      "additionalProperties": false
    },
    "LayerDescType": {
      "type": "object",
      "description": "This section describes layer contents.",
      "properties": {
        "description": { "type": "string" },
        "type": {
          "type": "string",
          "description": "Layer type for compatible layers matching"
        },
        "for-board":   { "$ref": "#/definitions/BoardType" },
        "for-device":  { "$ref": "#/definitions/DeviceType" },
        "packs":       { "$ref": "#/definitions/PacksType" },
        "board":       { "$ref": "#/definitions/BoardType" },
        "device":      { "$ref": "#/definitions/DeviceType" },
        "compiler":    { "$ref": "#/definitions/CompilerType" },
        "optimize":    { "$ref": "#/definitions/OptimizeType" },
        "debug":       { "$ref": "#/definitions/DebugType" },
        "warnings":    { "$ref": "#/definitions/WarningsType" },
        "processor":   { "$ref": "#/definitions/ProcessorType" },
        "define":      { "$ref": "#/definitions/DefinesType" },
        "undefine":    { "$ref": "#/definitions/UndefinesType" },
        "add-path":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":    { "$ref": "#/definitions/DelpathsType" },
        "misc":        { "$ref": "#/definitions/MiscTypes" },
        "groups":      { "$ref": "#/definitions/GroupsType" },
        "components":  { "$ref": "#/definitions/ComponentsType" },
        "connections": { "$ref": "#/definitions/ConnectionsType" },
        "linker":      { "$ref": "#/definitions/LinkersType" },
        "generators":  { "$ref": "#/definitions/GeneratorsOutputType" }
      },
      "additionalProperties": false
    },
    "PacksType": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/PackType" }
    },
    "PackID": {
      "type": "string",
      "pattern": "^([\\w .-]+)((::[\\w .*-]+)(@(>=)?(\\d+\\.\\d+\\.\\d+((\\+|\\-)[\\w.+-]+)?))?)?$",
      "description": "Name of a required Software Pack in the format Vendor [:: Pack [@[>=] version]]"
    },
    "PackType": {
      "type": "object",
      "properties": {
        "pack": { "$ref": "#/definitions/PackID" },
        "path": {
          "type": "string",
          "description": "Path to software pack"
        },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" }
      },
      "allOf": [
        { "$ref": "#/definitions/TypeListMutualExclusion" },
        { "required": [ "pack" ] }
      ],
      "additionalProperties": false
    },
    "ResolvedComponentsType": {
      "type": "array",
      "description": "List of software components in their resolved state.",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ResolvedComponentType" }
    },
    "ResolvedComponentType": {
      "type": "object",
      "description": "Software component in its resolved state",
      "properties": {
        "component":   { "$ref": "#/definitions/ComponentID" },
        "condition":   { "$ref": "#/definitions/ConditionIDType" },
        "selected-by": { "$ref": "#/definitions/ComponentID" },
        "rtedir":      { "type": "string" },
        "optimize":    { "$ref": "#/definitions/OptimizeType" },
        "debug":       { "$ref": "#/definitions/DebugType" },
        "warnings":    { "$ref": "#/definitions/WarningsType" },
        "define":      { "$ref": "#/definitions/DefinesType" },
        "undefine":    { "$ref": "#/definitions/UndefinesType" },
        "add-path":    { "$ref": "#/definitions/AddpathsType" },
        "del-path":    { "$ref": "#/definitions/DelpathsType" },
        "misc":        { "$ref": "#/definitions/MiscTypes" },
        "files":       { "$ref": "#/definitions/FilesType" },
        "generator":   { "$ref": "#/definitions/ComponentGeneratorType" },
        "from-pack":   { "$ref": "#/definitions/PackID" }
      },
      "additionalProperties": false
    },
    "SetupsType": {
      "type": "array",
      "description": "List of setup nodes that collects various toolchain options",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/SetupType" }
    },
    "SetupType": {
      "type": "object",
      "properties": {
        "setup":           { "type": "string" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" },
        "optimize":        { "$ref": "#/definitions/OptimizeType" },
        "debug":           { "$ref": "#/definitions/DebugType" },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "undefine":        { "$ref": "#/definitions/UndefinesType" },
        "add-path":        { "$ref": "#/definitions/AddpathsType" },
        "del-path":        { "$ref": "#/definitions/DelpathsType" },
        "misc":            { "$ref": "#/definitions/MiscTypes" },
        "output":          { "$ref": "#/definitions/OutputType" },
        "linker":          { "$ref": "#/definitions/LinkersType" },
        "processor":       { "$ref": "#/definitions/ProcessorType" }
      },
      "$ref": "#/definitions/TypeListMutualExclusion",
      "additionalProperties": false
    },
    "ConnectionsType": {
      "description": "List of consumed and provided connections compatibility",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/ConnectType" }
    },
    "ConnectType": {
      "type": "object",
      "description": "Group of specific functionality",
      "properties": {
        "connect": {
          "type": "string",
          "description": "Description of specific functionality"
        },
        "set": {
          "type": "string",
          "pattern": "^.+\\..+$",
          "description": "Set configuration option in the format 'config-id.select'"
        },
        "info": {
          "type": "string",
          "description": "Display description when connect is selected"
        },
        "consumes": {
          "type": "array",
          "description": "Consumed connections",
          "items": { "$ref": "#/definitions/ConsumesProvidesType" }
        },
        "provides": {
          "type": "array",
          "description": "Provided connections",
          "items": { "$ref": "#/definitions/ConsumesProvidesType" }
        }
      },
      "additionalProperties": false,
      "required": [ "connect" ]
    },
    "LinkersType": {
      "description": "Linker Scripts and/or memory regions header files",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/LinkerType" }
    },
    "LinkerType": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "string",
          "description": "Path and file name of regions_<device_or_board>.h, used to generate a Linker Script"
        },
        "script": {
          "type": "string",
          "description": "Explicit file name of the Linker Script, overrules files provided with file: or components"
        },
        "define":          { "$ref": "#/definitions/DefinesType" },
        "for-context":     { "$ref": "#/definitions/ForContext" },
        "not-for-context": { "$ref": "#/definitions/NotForContext" },
        "for-compiler":    { "$ref": "#/definitions/CompilersType" }
      },
      "additionalProperties": false
    },
    "CreatedInfoType": {
      "type": "string",
      "pattern": "^.*@\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
    }
  }
}
