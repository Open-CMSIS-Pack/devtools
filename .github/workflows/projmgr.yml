name: projmgr
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/projmgr.yml'
      - 'CMakeLists.txt'
      - 'libs/crossplatform/**'
      - 'libs/rtefsutils/**'
      - 'libs/xmlreader/**'
      - 'libs/xmltree/**'
      - 'libs/xmltreeslim/**'
      - 'tools/projmgr/**'
  pull_request:
    paths:
      - '.github/workflows/projmgr.yml'
      - 'CMakeLists.txt'
      - 'libs/crossplatform/**'
      - 'libs/rtefsutils/**'
      - 'libs/xmlreader/**'
      - 'libs/xmltree/**'
      - 'libs/xmltreeslim/**'
      - 'tools/projmgr/**'
  release:
    types: [published]

jobs:
  matrix_prep:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/projmgr/'))
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        publicRepo=$(echo '${{ github.event.repository.private && 'privateRepo' || 'publicRepo' }}')
        matrix=$(jq --arg publicRepo "$publicRepo" 'map(. | select((.runOn==$publicRepo) or (.runOn=="always")) )' matrix_includes_projmgr.json)
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
      working-directory: .github/
  build:
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/Arm-Debug/mcu-build-action
      - name: Build
        uses: Arm-Debug/mcu-build-action@v1.1
        with:
          target: projmgr
          arch: ${{ matrix.arch }}

      - name: Archive projmgr
        uses: actions/upload-artifact@v2
        with:
          name: projmgr-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/tools/projmgr/${{ matrix.target }}/Release/${{ matrix.binary }}
          retention-days: 1
          if-no-files-found: error

      # https://github.com/Arm-Debug/mcu-build-action
      - name: Build swig libs windows
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        uses: Arm-Debug/mcu-build-action@v1.1
        with:
          add_cmake_variables: -DSWIG_LIBS=ON
          add_cmake_build_args: --config Release
          arch: ${{ matrix.arch }}
          build_folder: buildswig
          target: projmgr-python

      # https://github.com/Arm-Debug/mcu-build-action
      - name: Build swig libs macos and ubuntu amd64
        if: ${{ startsWith(matrix.runs_on, 'macos') || ( startsWith(matrix.runs_on, 'ubuntu') && matrix.arch == 'amd64' ) }}
        uses: Arm-Debug/mcu-build-action@v1.1
        with:
          add_cmake_variables: -DSWIG_LIBS=ON
          add_cmake_build_args: --config Release
          arch: ${{ matrix.arch }}
          build_folder: buildswig
          target: projmgr-python projmgr-go

      - name: Archive projmgr swig python libs windows
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        uses: actions/upload-artifact@v2
        with:
          name: projmgr-swig-python-${{ matrix.target }}-${{ matrix.arch }}
          path: |
             ./buildswig/tools/projmgr/swig/python/projmgr.py
             ./buildswig/tools/projmgr/swig/python/_projmgr.pyd
          retention-days: 1

      - name: Archive projmgr swig python libs macos ubuntu amd64
        if: ${{ startsWith(matrix.runs_on, 'macos') || ( startsWith(matrix.runs_on, 'ubuntu') && matrix.arch == 'amd64' ) }}
        uses: actions/upload-artifact@v2
        with:
          name: projmgr-swig-python-${{ matrix.target }}-${{ matrix.arch }}
          path: |
             ./buildswig/tools/projmgr/swig/python/projmgr.py
             ./buildswig/tools/projmgr/swig/python/_projmgr.so
          retention-days: 1

      - name: Archive projmgr swig go libs macos ubuntu amd64
        if: ${{ startsWith(matrix.runs_on, 'macos') || ( startsWith(matrix.runs_on, 'ubuntu') && matrix.arch == 'amd64' ) }}
        uses: actions/upload-artifact@v2
        with:
          name: projmgr-swig-go-${{ matrix.target }}-${{ matrix.arch }}
          path: |
             ./buildswig/tools/projmgr/swig/go/projmgr.go
             ./buildswig/tools/projmgr/swig/go/projmgr.so
          retention-days: 1

  release:
    if: |
        github.event_name == 'release' &&
        startsWith(github.ref, 'refs/tags/tools/projmgr/')
    needs: [ build, unittest, coverage ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2

      - name: Create distribution folders
        run: |
          mkdir -p tools/projmgr/distribution/bin tools/projmgr/distribution/lib tools/projmgr/distribution/doc tools/projmgr/distribution/etc
          cp tools/projmgr/docs/LICENSE.txt tools/projmgr/distribution/
          cp -r tools/projmgr/docs/Manual/* tools/projmgr/distribution/doc/
          cp -r tools/projmgr/schemas/* tools/projmgr/distribution/etc/
          cp -r tools/projmgr/templates/* tools/projmgr/distribution/etc/

      - name: Download projmgr linux amd64
        uses: actions/download-artifact@v2
        with:
          name: projmgr-linux64-amd64
          path: tools/projmgr/distribution/bin/linux64/

      - name: Download projmgr macos amd64
        uses: actions/download-artifact@v2
        with:
          name: projmgr-darwin64-amd64
          path: tools/projmgr/distribution/bin/darwin64/

      - name: Download projmgr windows amd64
        uses: actions/download-artifact@v2
        with:
          name: projmgr-windows64-amd64
          path: tools/projmgr/distribution/bin/windows64/

      - name: Download projmgr-swig-python linux
        uses: actions/download-artifact@v2
        with:
          name: projmgr-swig-python-linux64-amd64
          path: tools/projmgr/distribution/lib/linux64/python/

      - name: Download projmgr-swig-python macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: projmgr-swig-python-darwin64-amd64
          path: tools/projmgr/distribution/lib/darwin64/python/

      - name: Download projmgr-swig-python windows
        uses: actions/download-artifact@v2
        with:
          name: projmgr-swig-python-windows64-amd64
          path: tools/projmgr/distribution/lib/windows64/python/

      - name: Download projmgr-swig-go linux
        uses: actions/download-artifact@v2
        with:
          name: projmgr-swig-go-linux64-amd64
          path: tools/projmgr/distribution/lib/linux64/go/

      - name: Download projmgr-swig-go macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: projmgr-swig-go-darwin64-amd64
          path: tools/projmgr/distribution/lib/darwin64/go/

      - name: Zip distribution folder
        run: zip -r projmgr.zip *
        working-directory: tools/projmgr/distribution

      - name: Attach zip archive to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/projmgr/distribution/projmgr.zip
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: projmgr.zip

      - name: Download test report windows
        uses: actions/download-artifact@v2
        with:
          name: unittest-windows64
          path: tools/testreport/windows64/

      - name: Download test report linux
        uses: actions/download-artifact@v2
        with:
          name: unittest-linux64
          path: tools/testreport/linux64/

      - name: Download test report macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: unittest-darwin64
          path: tools/testreport/darwin64/

      - name: Zip test reports
        run: zip -r testreport.zip *
        working-directory: tools/testreport

      - name: Attach test report archive to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/testreport/testreport.zip
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: testreport.zip

      - name: Download coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: tools/coverage/

      - name: Attach coverage archive to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/coverage/coverage.zip
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: coverage.zip

  unittest:
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/Arm-Debug/mcu-build-action
      - name: Build ProjMgrUnitTests
        uses: Arm-Debug/mcu-build-action@v1.1
        with:
          arch: ${{ matrix.arch }}
          build_type: Debug
          target: ProjMgrUnitTests

      - name: Run projmgr unit tests
        run: |
          ctest -V -C Debug -R ProjMgrUnitTests
        working-directory: ./build

      - name: Archive unit tests results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: unittest-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/Testing/Temporary/LastTest.log
          retention-days: 1
          if-no-files-found: error

      - name: Archive gtest report
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: unit_gtest-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/test_reports/projmgrunittest-*.xml
          retention-days: 1
          if-no-files-found: error

  coverage:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'push') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/projmgr/'))
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Install linux deps
        run: |
          sudo apt update
          sudo apt-get install \
            lcov

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/Arm-Debug/mcu-build-action
      - name: Build ProjMgrUnitTests
        uses: Arm-Debug/mcu-build-action@v1.1
        with:
          add_cmake_variables: -DCOVERAGE=ON
          arch: amd64
          build_type: Debug
          target: ProjMgrUnitTests

      - name: Run ProjMgrUnitTests
        run: |
          ctest -V -C Debug -R ProjMgrUnitTests
        working-directory: ./build

      - name: Generate coverage report
        run: |
          lcov -c --directory . --output-file full_coverage.info
          lcov -e full_coverage.info '/tools/projmgr/include/*' '*/tools/projmgr/src/*' -o coverage.info
          genhtml coverage.info --output-directory coverage
          zip -r coverage.zip coverage/*
        working-directory: ./build/tools/projmgr/

      - name: Upload Report to Codecov
        if: ${{ !github.event.repository.private }}
        uses: codecov/codecov-action@v2
        with:
          files: ./build/tools/projmgr/coverage.info
          fail_ci_if_error: true
          flags: projmgr-cov
          functionalities: fix

      - name: Archive coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./build/tools/projmgr/coverage.zip
          retention-days: 1
          if-no-files-found: error

  publish-test-results:
    name: "Publish Tests Results"
    needs: [ matrix_prep, unittest ]
    runs-on: ${{ matrix.runs_on }}
    if: ${{ false }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Download gtest report windows
        uses: actions/download-artifact@v2
        with:
          name: unit_gtest-windows64-amd64
          path: testreport/

      - name: Download gtest report linux
        uses: actions/download-artifact@v2
        with:
          name: unit_gtest-linux64-amd64
          path: testreport/

      - name: Download gtest report macos
        uses: actions/download-artifact@v2
        with:
          name: unit_gtest-darwin64-amd64
          path: testreport/

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: testreport/*.xml
          report_individual_runs: true
          check_name: "Test Results"
