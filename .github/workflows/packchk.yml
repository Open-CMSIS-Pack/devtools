name: packchk
on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - '.github/workflows/packchk.yml'
      - '.github/workflows/unit_test_results.yml'
      - 'CMakeLists.txt'
      - 'tools/packchk/**'
  release:
    types: [published]

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        publicRepo=$(echo '${{ github.event.repository.private && 'privateRepo' || 'publicRepo' }}')
        matrix=$(jq --arg publicRepo "$publicRepo" 'map(. | select((.runOn==$publicRepo) or (.runOn=="always")) )' matrix_includes_packchk.json)
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
      working-directory: .github/

  build:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/')) }}
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Install macos deps
        if: ${{ startsWith(matrix.runs_on, 'macos') }}
        run: |
          brew install \
            ninja

      - name: Install linux deps
        if: ${{ startsWith(matrix.runs_on, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build

      - name: Install windows deps
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        run: choco install -y ninja

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build folder
        run: |
          mkdir build

      - name: Configure windows build for amd64
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - uses: ammaraskar/gcc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
      - uses: ammaraskar/msvc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'windows') }}

      - name: Build packchk
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target packchkdist
        working-directory: ./build

      - name: Attach installer to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          file: build/tools/packchk/packchk-*-${{ matrix.target }}.zip

  test:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/')) }}
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Install macos deps
        if: ${{ startsWith(matrix.runs_on, 'macos') }}
        run: |
          brew install \
            ninja

      - name: Install linux deps
        if: ${{ startsWith(matrix.runs_on, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build

      - name: Install windows deps
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        run: choco install -y ninja

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build folder
        run: |
          mkdir build

      - name: Configure windows build for amd64
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - uses: ammaraskar/gcc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
      - uses: ammaraskar/msvc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'windows') }}

      - name: Build and run packchk unit tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
          cmake --build . --target PackChkUnitTests
          ctest -V -R PackChkUnitTests
        working-directory: ./build

      - name: Build and run packchk integ tests
        run: |
          cmake --build . --target PackChkIntegTests
          ctest -V -R PackChkIntegTests
        working-directory: ./build

      - name: Archive unit test results
        uses: actions/upload-artifact@v2
        with:
          name: unit_test_result-${{ matrix.target }}
          path: ./build/test_reports/packchkunittest-*.xml
          if-no-files-found: error

      - name: Archive integration test results
        uses: actions/upload-artifact@v2
        with:
          name: integ_test_result-${{ matrix.target }}
          path: ./build/test_reports/packchkintegtest-*.xml
          if-no-files-found: error

  coverage:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/')) }}
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build \
            lcov

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build folder
        run: mkdir build

      - name: Build and run packchk tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON ..
          cmake --build . --target PackChkIntegTests
          ctest -V -C Debug -R PackChkIntegTests
          cmake --build . --target PackChkUnitTests
          ctest -V -C Debug -R PackChkUnitTests
        working-directory: ./build

      - name: Generate coverage report
        run: |
          lcov -c --directory . --output-file full_coverage.info
          lcov -e full_coverage.info '/tools/packchk/include/*' '*/tools/packchk/src/*' -o coverage.info
          genhtml coverage.info --output-directory coverage
          zip -r coverage.zip coverage/*
        working-directory: ./build/tools/packchk

      - name: Upload Report to Codecov
        if: ${{ !github.event.repository.private }}
        uses: codecov/codecov-action@v2
        with:
          files: ./build/tools/packchk/coverage.info
          fail_ci_if_error: true
          flags: packchk-cov
          functionalities: fix

      - name: Archive coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./build/tools/packchk/coverage.zip
          retention-days: 1
          if-no-files-found: error

  release:
    if: ${{ github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/') }}
    needs: [ build, test, coverage ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2

      - name: Create distribution folders
        run: |
          mkdir -p tools/packchk/distribution/

      - name: Download coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: tools/packchk/distribution/coverage/

      - name: Zip distribution folder
        run: zip -r packchk.zip *
        working-directory: tools/packchk/distribution

      - name: Attach zip archive to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/packchk/distribution/packchk.zip
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: packchk.zip

  test-results-preparation:
    name: "Publish Tests Results"
    needs: [ test ]
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Download unit test report windows
        uses: actions/download-artifact@v2
        with:
          name: unit_test_result-windows64
          path: testreports/

      - name: Download unit test report linux
        uses: actions/download-artifact@v2
        with:
          name: unit_test_result-linux64
          path: testreports/

      - name: Download unit test report macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: unit_test_result-darwin64
          path: testreports/

      - name: Download integ test report windows
        uses: actions/download-artifact@v2
        with:
          name: integ_test_result-windows64
          path: testreports/

      - name: Download integ test report linux
        uses: actions/download-artifact@v2
        with:
          name: integ_test_result-linux64
          path: testreports/

      - name: Download integ test report macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: integ_test_result-darwin64
          path: testreports/

      - name: Event File
        uses: actions/upload-artifact@v2
        with:
          name: Event File
          path: ${{ github.event_path }}
