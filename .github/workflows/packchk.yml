name: packchk
on:
  push:
  pull_request:
    paths:
      - '.github/workflows/packchk.yml'
      - 'CMakeLists.txt'
      - 'tools/packchk/**'
  release:
    types: [published]

jobs:
  build:
    if: |
      ${{ 
        github.event_name == 'pull_request' ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/'))
      }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-10.15, ubuntu-20.04, windows-2019 ]
        include:
          - os: macos-10.15
            target: darwin64
          - os: ubuntu-20.04
            target: linux64
          - os: windows-2019
            target: windows64
    steps:
      - name: Install macos deps
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install \
            ninja

      - name: Install linux deps
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build

      - name: Install windows deps
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: choco install -y ninja

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build folder
        run: |
          mkdir build
          mkdir build-debug

      - name: Configure windows build for amd64
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - uses: ammaraskar/gcc-problem-matcher@master
        if: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}

      - uses: ammaraskar/msvc-problem-matcher@master
        if: ${{ startsWith(matrix.os, 'windows') }}

      - name: Build and run packchk unit tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
          cmake --build . --target PackChkUnitTests
          ctest -V -R PackChkUnitTests
        working-directory: ./build-debug

      - name: Build and run packchk integ tests
        run: |
          cmake --build . --target PackChkIntegTests
          ctest -V -R PackChkIntegTests
        working-directory: ./build-debug

      - name: Upload unit test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results ${{ matrix.target }}
          path: ./build-debug/test_reports/packchkunittest-*.xml
          if-no-files-found: error

      - name: Upload integration test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: Integ Test Results ${{ matrix.target }}
          path: ./build-debug/test_reports/packchkintegtest-*.xml
          if-no-files-found: error

      - name: Build packchk
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target packchkdist
        working-directory: ./build

      - name: Attach installer to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          file: build/tools/packchk/packchk-*-${{ matrix.target }}.zip

      - name: Attach test report to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          file: ./build-debug/test_reports/packchkintegtest-*.xml

  coverage:
    if: |
      ${{
        github.event_name == 'pull_request' ||
        github.event_name == 'push' ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packchk/'))
      }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-20.04 ]

    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build \
            lcov

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build folder
        run: mkdir build

      - uses: ammaraskar/gcc-problem-matcher@master
        if: ${{ startsWith(matrix.os, 'ubuntu') }}

      - name: Build and run packchk tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON ..
          cmake --build . --target PackChkIntegTests
          ctest -V -C Debug -R PackChkIntegTests
          cmake --build . --target PackChkUnitTests
          ctest -V -C Debug -R PackChkUnitTests
        working-directory: ./build

      - name: Generate coverage report
        run: |
          lcov -c --directory ./tools/packchk/ --output-file full_coverage.info
          lcov -e full_coverage.info '/tools/packchk/include/*' '*/tools/packchk/src/*' -o coverage.info
          genhtml coverage.info --output-directory test_coverage
          zip -r test_coverage.zip test_coverage/*
        working-directory: ./build

      - name: Upload Report to Codecov
        if: ${{ !github.event.repository.private }}
        uses: codecov/codecov-action@v1.3.2
        with:
          files: ./build/coverage.info
          fail_ci_if_error: true
          functionalities: fix

      - name: Attach coverage report to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          file: build/test_coverage.zip

  publish-test-results:
    name: "Publish Tests Results"
    needs: build
    runs-on: ${{ matrix.os }}
    if: ${{ always() }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-10.15, ubuntu-20.04, windows-2019 ]
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@master
        with:
          files: artifacts/**/*.xml
          report_individual_runs: true
          check_name: "Test Results"
          comment_mode: off

