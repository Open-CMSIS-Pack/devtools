name: packgen
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/packgen.yml'
      - '.github/matrix_includes_packgen.json'
      - 'CMakeLists.txt'
      - 'libs/crossplatform/**'
      - 'libs/rtefsutils/**'
      - 'libs/xmlreader/**'
      - 'libs/xmltree/**'
      - 'libs/xmltreeslim/**'
      - 'tools/packgen/**'
      - '!**/*.md'
  pull_request:
    paths:
      - '.github/workflows/packgen.yml'
      - '.github/matrix_includes_packgen.json'
      - 'CMakeLists.txt'
      - 'libs/crossplatform/**'
      - 'libs/rtefsutils/**'
      - 'libs/xmlreader/**'
      - 'libs/xmltree/**'
      - 'libs/xmltreeslim/**'
      - 'tools/packgen/**'
      - '!**/*.md'
  release:
    types: [published]

jobs:
  matrix_prep:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packgen/'))
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out repo
      uses: actions/checkout@v3
    - id: set-matrix
      run: |
        publicRepo=$(echo '${{ github.event.repository.private && 'privateRepo' || 'publicRepo' }}')
        matrix=$(jq --arg publicRepo "$publicRepo" 'map(. | select((.runOn==$publicRepo) or (.runOn=="always")) )' matrix_includes_packgen.json)
        echo "matrix={\"include\":$(echo $matrix)}\"" >> $GITHUB_OUTPUT
      working-directory: .github/

  build:
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Checkout devtools
        uses: actions/checkout@v3
        with:
          submodules: true

      # https://github.com/Open-CMSIS-Pack/devtools-build-action
      - name: Build
        uses: Open-CMSIS-Pack/devtools-build-action@v1.2
        id: devtools-build
        with:
          target: packgen
          arch: ${{ matrix.arch }}

      - name: Archive packgen
        uses: actions/upload-artifact@v3
        with:
          name: packgen-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/tools/packgen/${{ matrix.target }}/Release/${{ matrix.binary }}
          retention-days: 1
          if-no-files-found: error

  release:
    if: |
        github.event_name == 'release' &&
        startsWith(github.ref, 'refs/tags/tools/packgen/')
    needs: [ build, unittest ]
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v3

      - name: Create distribution folders
        run: |
          mkdir -p tools/packgen/distribution/bin tools/packgen/distribution/doc/examples
          cp tools/packgen/docs/LICENSE.txt tools/packgen/distribution/
          cp tools/packgen/docs/packgen.md tools/packgen/distribution/doc/
          cp -r tools/packgen/test/data/CMakeTestProject/ tools/packgen/distribution/doc/examples/
          cp -r tools/packgen/test/data/CMakeTestMultipleBuilds/ tools/packgen/distribution/doc/examples/

      - name: Download packgen linux amd64
        uses: actions/download-artifact@v3
        with:
          name: packgen-linux64-amd64
          path: tools/packgen/distribution/bin/linux-amd64/

      - name: Download packgen linux arm64
        uses: actions/download-artifact@v3
        with:
          name: packgen-linux64-arm64
          path: tools/packgen/distribution/bin/linux-arm64/

      - name: Download packgen macos amd64
        uses: actions/download-artifact@v3
        with:
          name: packgen-darwin64-amd64
          path: tools/packgen/distribution/bin/darwin-amd64/

      - name: Download packgen windows amd64
        uses: actions/download-artifact@v3
        with:
          name: packgen-windows64-amd64
          path: tools/packgen/distribution/bin/windows-amd64/

      - name: Zip distribution folder
        run: zip -r packgen.zip *
        working-directory: tools/packgen/distribution

      - name: Attach zip archive to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/packgen/distribution/packgen.zip
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: packgen.zip

  unittest:
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Checkout devtools
        uses: actions/checkout@v3
        with:
          submodules: true

      # https://github.com/Open-CMSIS-Pack/devtools-build-action
      - name: Build PackGenUnitTests
        uses: Open-CMSIS-Pack/devtools-build-action@v1.2
        with:
          target: PackGenUnitTests
          build_type: Debug
          arch: ${{ matrix.arch }}

      - name: Run packgen unit tests
        run: |
          ctest -C Debug -R PackGenUnitTests
        working-directory: ./build

      - name: Archive unit tests results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: unit_test_result-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/packgenunit_test_report.xml
          retention-days: 1
          if-no-files-found: error

  coverage:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'push') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/packgen/'))
    env:
        lcov_base: https://github.com/linux-test-project/lcov/releases/download/v1.15/
        lcov_installer: lcov-1.15.tar.gz
        cov_retention_days: 1
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Install linux deps
        run: |
          sudo apt update
          sudo apt-get install \
            lcov

      - name: Checkout devtools
        uses: actions/checkout@v3
        with:
          submodules: true

      # https://github.com/Open-CMSIS-Pack/devtools-build-action
      - name: Build PackGenUnitTests
        uses: Open-CMSIS-Pack/devtools-build-action@v1.2
        with:
          add_cmake_variables: -DCOVERAGE=ON
          arch: amd64
          build_type: Debug
          target: PackGenUnitTests

      - name: Run PackGenUnitTests
        run: |
          ctest -V -C Debug -R PackGenUnitTests
        working-directory: ./build

      # Needs to be removed once the bug is resolved
      # lcov reporting 1.14 on 1.15 version
      # https://groups.google.com/g/linux.debian.bugs.dist/c/a9SZGCENJ2s?pli=1
      - name: Setup lcov1.15
        run: |
          wget -q ${{ env.lcov_base }}/${{ env.lcov_installer }}
          tar -xvf ${{ env.lcov_installer }}
        working-directory: ./build/tools/packgen

      - name: Generate coverage report
        run: |
          lcov-1.15/bin/lcov --rc lcov_branch_coverage=1 --rc geninfo_no_exception_branch=1 -c --directory . --output-file full_coverage.info
          lcov-1.15/bin/lcov --rc lcov_branch_coverage=1 --rc geninfo_no_exception_branch=1 -e full_coverage.info '/tools/packgen/include/*' '*/tools/packgen/src/*' -o coverage.info
          genhtml coverage.info --output-directory coverage --branch-coverage
          zip -r coverage.zip coverage/*
        working-directory: ./build/tools/packgen/

      - name: Upload Report to Codecov
        if: ${{ !github.event.repository.private }}
        uses: codecov/codecov-action@v3
        with:
          files: ./build/tools/packgen/coverage.info
          fail_ci_if_error: true
          flags: packgen-cov
          functionalities: fix

      - name: Determine retention days
        if: (github.event_name == 'push')
        run: |
          echo "cov_retention_days=7" >> $GITHUB_ENV

      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            ./build/tools/packgen/coverage.zip
            ./build/tools/packgen/coverage.info
          retention-days: ${{ env.cov_retention_days }}
          if-no-files-found: error

  test-results-preparation:
    name: "Publish Tests Results"
    needs: [ unittest ]
    runs-on: ubuntu-22.04
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Download unit test report windows
        uses: actions/download-artifact@v3
        with:
          name: unit_test_result-windows64-amd64
          path: testreports/

      - name: Download unit test report linux amd64
        uses: actions/download-artifact@v3
        with:
          name: unit_test_result-linux64-amd64
          path: testreports/

      - name: Download unit test report linux arm64
        uses: actions/download-artifact@v3
        with:
          name: unit_test_result-linux64-arm64
          path: testreports/

      - name: Download unit test report macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v3
        with:
          name: unit_test_result-darwin64-amd64
          path: testreports/

      - name: Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
