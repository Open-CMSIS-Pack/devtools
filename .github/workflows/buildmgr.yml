name: buildmgr
on:
  pull_request:
    paths:
      - '.github/workflows/buildmgr.yml'
      - 'CMakeLists.txt'
      - 'libs/crossplatform/**'
      - 'libs/errlog/**'
      - 'libs/xmlreader/**'
      - 'libs/xmltree/**'
      - 'libs/xmltreeslim/**'
      - 'libs/rteutils/**'
      - 'libs/rtemodel/**'
      - 'libs/rtefsutils/**'
      - 'tools/buildmgr/**'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/buildmgr.yml'
      - 'tools/buildmgr/docs/**'
  release:
    types: [ published ]

jobs:
  matrix_prep:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/buildmgr/'))
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        publicRepo=$(echo '${{ github.event.repository.private && 'privateRepo' || 'publicRepo' }}')
        matrix=$(jq --arg publicRepo "$publicRepo" 'map(. | select((.runOn==$publicRepo) or (.runOn=="always")) )' matrix_includes_buildmgr.json)
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
      working-directory: .github/

  build:
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 15
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/Arm-Examples/mcu-build-action
      - name: Build
        uses: Arm-Examples/mcu-build-action@v1.1
        id: mcu-build
        with:
          target: cbuildgen
          arch: ${{ matrix.arch }}

      - name: Rename binary to be integrated to the installer
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
        env:
          target: ${{ matrix.target }}
          binary_extension: ${{ matrix.binary_extension }}
        run: mv cbuildgen cbuildgen${binary_extension}
        working-directory: build/tools/buildmgr/cbuildgen/${{ matrix.target }}/Release

      - name: Archive cbuildgen
        uses: actions/upload-artifact@v2
        with:
          name: cbuildgen-${{ matrix.target }}-${{ matrix.arch }}
          path: ./build/tools/buildmgr/cbuildgen/${{ matrix.target }}/Release/cbuildgen${{ matrix.binary_extension }}
          retention-days: 1
          if-no-files-found: error

  docs:
    if: |
        (github.event_name == 'pull_request') ||
        (github.event_name == 'push') ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/buildmgr/'))
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: ${{ github.event_name == 'push' && '0' || '1' }}

      - name: Install deps
        run: |
          sudo apt update
          sudo apt-get install ninja-build python
          wget -q http://launchpadlibrarian.net/163827726/doxygen_1.8.6-2_amd64.deb
          sudo dpkg -i doxygen_1.8.6-2_amd64.deb
          sudo pip install LinkChecker

      - name: Create build folder
        run: mkdir build

      - name: Build documentation
        run: |
          cmake -G Ninja ..
          echo "::add-matcher::.github/doxygen.json"
          cmake --build . --target buildmgr-docs
          echo "::remove-matcher owner=doxygen::"
        working-directory: ./build

      - name: Run linkchecker
        run: |
          echo "::add-matcher::.github/linkchecker.json"
          ../scripts/check_links.sh tools/buildmgr/docs/doxygen/output/html/index.html ../tools/buildmgr/docs/doxygen/Build/src/
          echo "::remove-matcher owner=linkchecker::"
        working-directory: ./build

      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: ./build/tools/buildmgr/docs/doxygen/output/
          retention-days: 1
          if-no-files-found: error

      - name: Archive documentation
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: tar -cvjf /tmp/doc.tbz2 .
        working-directory: ./build/tools/buildmgr/docs/doxygen/output/html/

      - uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        with:
          ref: gh-pages

      - name: Publish main branch documentation
        if: ${{ !github.event.repository.private && github.event_name == 'push' }}
        run: |
          BRANCH=${GITHUB_REF##refs/heads/}
          rm -rf buildmgr/${BRANCH}
          mkdir -p buildmgr/${BRANCH}
          pushd buildmgr/${BRANCH}
          tar -xvjf /tmp/doc.tbz2
          popd
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add buildmgr/${BRANCH}
          git commit -m "Update buildmgr main branch documentation"
          git push

      - name: Publish release documentation
        if: ${{ !github.event.repository.private && github.event_name == 'release' }}
        run: |
          VERSION=$(git show-ref ${{ github.ref }} | awk -F/ '{print $NF}')
          rm -rf buildmgr/${VERSION}
          rm -f buildmgr/latest
          mkdir -p buildmgr/${VERSION}
          ln -s ${VERSION}/ buildmgr/latest
          pushd buildmgr/${VERSION}
          tar -xvjf /tmp/doc.tbz2
          popd
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add buildmgr/${VERSION}
          git add buildmgr/latest
          git commit -m "Update buildmgr documentation for release ${VERSION}"
          git push

  create_installer:
    needs: [ build, docs ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Install deps
        run: |
          sudo apt update
          sudo apt-get install \
            build-essential \
            debhelper \
            devscripts \
            python

      - name: Checkout devtools
        uses: actions/checkout@v2

      - name: Create distribution folders
        run: |
          mkdir -p tools/buildmgr/cbuildgen/distribution/bin
          mkdir -p tools/buildmgr/cbuildgen/distribution/doc

      - name: Download cbuildgen linux
        uses: actions/download-artifact@v2
        with:
          name: cbuildgen-linux64-amd64
          path: tools/buildmgr/cbuildgen/distribution/bin/

      - name: Download cbuildgen macos
        if: ${{ !github.event.repository.private }}
        uses: actions/download-artifact@v2
        with:
          name: cbuildgen-darwin64-amd64
          path: tools/buildmgr/cbuildgen/distribution/bin/

      - name: Download cbuildgen windows
        uses: actions/download-artifact@v2
        with:
          name: cbuildgen-windows64-amd64
          path: tools/buildmgr/cbuildgen/distribution/bin/

      - name: Adding execution permission to the binaries
        run: |
          chmod +x cbuildgen.*
        working-directory: tools/buildmgr/cbuildgen/distribution/bin

      - name: Download documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation
          path: tools/buildmgr/cbuildgen/distribution/doc/

      - name: Create installer
        run: sudo ./create_installer.sh --input=../distribution --output=.
        working-directory: tools/buildmgr/cbuildgen/installer

      - name: Create deb package
        run: yes | sudo ./make_deb.sh --input=../distribution --output=.
        working-directory: tools/buildmgr/cbuildgen/installer

      - name: Archive cbuild_install.sh
        uses: actions/upload-artifact@v2
        with:
          name: cbuild_install
          path: tools/buildmgr/cbuildgen/installer/cbuild_install.sh
          retention-days: 1
          if-no-files-found: error

      - name: Archive deb package
        uses: actions/upload-artifact@v2
        with:
          name: deb_package
          path: tools/buildmgr/cbuildgen/installer/cmsis-build*.deb
          retention-days: 1
          if-no-files-found: error

      - name: Attach installer to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/buildmgr/cbuildgen/installer/cbuild_install.sh
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: cbuild_install.sh

      - name: Attach debian installer to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tools/buildmgr/cbuildgen/installer/cmsis-build*.deb
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true

  tests:
    needs: [ matrix_prep, create_installer ]
    timeout-minutes: 15
    runs-on: ${{ matrix.runs_on }}
    env:
      arm_gcc_install_base: https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4
      CI_CBUILD_DEB_PKG: ${{ github.workspace }}
      CI_CBUILD_INSTALLER: ${{ github.workspace }}/cbuild_install.sh
      CI_PACK_ROOT: ${{ github.workspace }}/packs
      CI_GCC_TOOLCHAIN_ROOT: ${{ github.workspace }}/gcc-arm-none-eabi-10-2020-q4-major/bin
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Install macos deps
        if: ${{ startsWith(matrix.runs_on, 'macos') }}
        run: |
          brew install \
            dos2unix \
            ninja \
            wget

      - name: Install linux deps
        if: ${{ startsWith(matrix.runs_on, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt-get install \
            dos2unix \
            ninja-build \
            libxml2-utils

      - name: Install windows deps
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        run: choco install -y unzip wget ninja

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup ARM GCC for Ubuntu and macOS
        if: ${{ startsWith(matrix.runs_on, 'macos') || ( startsWith(matrix.runs_on, 'ubuntu') && matrix.arch == 'amd64' ) }}
        env:
          installer_name: ${{ matrix.installer_name }}
        run: |
          wget -q ${arm_gcc_install_base}/${installer_name}
          tar -xvf ${installer_name}
          rm -rf ${installer_name}

      - name: Setup ARM GCC for Windows
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        env:
          installer_name: ${{ matrix.installer_name }}
        run: |
          wget -q $Env:arm_gcc_install_base/$Env:installer_name
          unzip $Env:installer_name
          del $Env:installer_name

      - name: Cache CMSIS Pack
        uses: actions/cache@v2
        env:
          CACHE_NAME: cmsis_pack
        with:
          key: ${{ env.CACHE_NAME }}-${{ matrix.runs_on }}
          path: ${{ env.CI_PACK_ROOT }}

      - name: Download cbuild_install
        uses: actions/download-artifact@v2
        with:
          name: cbuild_install
          path: ${{ github.workspace }}

      - name: Download deb_package
        uses: actions/download-artifact@v2
        with:
          name: deb_package
          path: ${{ github.workspace }}

      - name: Set correct cbuild_install file permission
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
        run: chmod +x cbuild_install.sh

      # https://github.com/Arm-Examples/mcu-build-action
      - name: Build CbuildUnitTests
        uses: Arm-Examples/mcu-build-action@v1.1
        with:
          target: CbuildUnitTests
          build_type: Debug
          arch: ${{ matrix.arch }}

      - name: Run CbuildUnitTests
        run: ctest -V -R CbuildUnitTests
        working-directory: build

      - name: Archive unittest
        uses: actions/upload-artifact@v2
        with:
          name: unittest_report_${{ matrix.target }}_${{ matrix.arch }}
          path: build/cbuildunit_test_report.xml
          retention-days: 1
          if-no-files-found: error

      - name: Publish Cbuild Unittest Results
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: "Cbuild Unittests [${{ matrix.target }}_${{ matrix.arch }}]"
          report_paths: build/cbuildunit_test_report.xml

      # https://github.com/Arm-Examples/mcu-build-action
      - name: Build CbuildIntegTests
        uses: Arm-Examples/mcu-build-action@v1.1
        with:
          target: CbuildIntegTests
          build_type: Debug
          arch: ${{ matrix.arch }}

      - name: Run Cbuild Integration Tests (excl. AC5, AC6, MultiTargetAC6Tests) for Linux amd64
        if: ${{ startsWith(matrix.runs_on, 'ubuntu') && matrix.arch == 'amd64' }}
        env:
          target: ${{ matrix.target }}
        run: ./tools/buildmgr/test/integrationtests/${target}/Debug/CbuildIntegTests --gtest_filter=-*AC5*:*AC6*:*MultiTargetAC6Tests* --gtest_output=xml:integtest_report_${target}.xml
        working-directory: build

      - name: Run Cbuild Integration Tests (excl. DebPkgTests, AC5, AC6, MultiTargetAC6Tests) for macOS
        if: ${{ startsWith(matrix.runs_on, 'macos') }}
        env:
          target: ${{ matrix.target }}
        run: ./tools/buildmgr/test/integrationtests/${target}/Debug/CbuildIntegTests --gtest_filter=-*DebPkgTests*:*AC5*:*AC6*:*MultiTargetAC6Tests* --gtest_output=xml:integtest_report_${target}.xml
        working-directory: build

      - name: Run Cbuild Integration Tests (excl. DebPkgTests, AC5, AC6, MultiTargetAC6Tests) for Windows
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        env:
          target: ${{ matrix.target }}
        # For some reason the env variable usage $Env:target does not work properly.
        run: .\tools\buildmgr\test\integrationtests\windows64\Debug\CbuildIntegTests.exe --gtest_filter=-*DebPkgTests*:*AC5*:*AC6*:*MultiTargetAC6Tests* --gtest_output=xml:integtest_report_$Env:target.xml
        working-directory: build

      - name: Archive Cbuild Integration Tests
        if: ${{ matrix.arch == 'amd64' }}
        uses: actions/upload-artifact@v2
        with:
          name: integtest_report_${{ matrix.target }}_${{ matrix.arch }}
          path: build/integtest_report_${{ matrix.target }}.xml
          retention-days: 1
          if-no-files-found: error

      - name: Publish Cbuild Integration Test Results
        if: ${{ matrix.arch == 'amd64' }}
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: "Cbuild Integration Tests [${{ matrix.target }}-${{ matrix.arch }}]"
          report_paths: build/integtest_report_${{ matrix.target }}.xml

  sanity-check-native:
    needs: [ create_installer, matrix_prep ]
    timeout-minutes: 15
    runs-on: ${{ matrix.runs_on }}
    env:
      CI_PACK_ROOT: ${{ github.workspace }}/packs
      CI_ARMCC6_TOOLCHAIN_ROOT: ""
      CI_ARMCC5_TOOLCHAIN_ROOT: ""
      CI_GCC_TOOLCHAIN_ROOT: ""
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - name: Download cbuild_install
        uses: actions/download-artifact@v2
        with:
          name: cbuild_install
          path: ${{ github.workspace }}

      - name: Set correct cbuild_install file permission
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
        run: chmod +x cbuild_install.sh

      - name: Run cbuild_install.sh
        if: ${{ matrix.arch == 'amd64' }}
        shell: bash
        run: |
          echo "${{ github.workspace }}/cbuild" > config
          echo "$CI_PACK_ROOT" >> config
          echo "$CI_ARMCC6_TOOLCHAIN_ROOT" >> config
          echo "$CI_ARMCC5_TOOLCHAIN_ROOT" >> config
          echo "$CI_GCC_TOOLCHAIN_ROOT" >> config
          ./cbuild_install.sh < config

      - name: Test cbuildgen
        if: ${{ matrix.arch == 'amd64' }}
        shell: bash
        run: |
          ${{ github.workspace }}/cbuild/bin/cbuildgen | grep "(cbuildgen): Build Process Manager"

  sanity-check-docker:
    needs: [ create_installer ]
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
    env:
      CI_PACK_ROOT: ${{ github.workspace }}/packs
      CI_ARMCC6_TOOLCHAIN_ROOT: ""
      CI_ARMCC5_TOOLCHAIN_ROOT: ""
      CI_GCC_TOOLCHAIN_ROOT: ""
    strategy:
      fail-fast: true
      matrix:
        image: [ "debian:buster" ]
    steps:
      - name: Download cbuild_install
        uses: actions/download-artifact@v2
        with:
          name: cbuild_install
          path: ${{ github.workspace }}

      - name: Set correct cbuild_install file permission
        run: chmod +x cbuild_install.sh

      - name: Run cbuild_install.sh
        shell: bash
        run: |
          echo "${{ github.workspace }}/cbuild" > config
          echo "$CI_PACK_ROOT" >> config
          echo "$CI_ARMCC6_TOOLCHAIN_ROOT" >> config
          echo "$CI_ARMCC5_TOOLCHAIN_ROOT" >> config
          echo "$CI_GCC_TOOLCHAIN_ROOT" >> config
          ./cbuild_install.sh < config

      - name: Test cbuildgen
        shell: bash
        run: |
          ${{ github.workspace }}/cbuild/bin/cbuildgen | grep "(cbuildgen): Build Process Manager"
