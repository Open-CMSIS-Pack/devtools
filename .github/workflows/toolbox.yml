name: toolbox
on:
  pull_request:
    paths:
      - '.github/workflows/toolbox.yml'
      - 'CMakeLists.txt'
      - 'tools/toolbox/**'
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        publicRepo=$(echo '${{ github.event.repository.private && 'privateRepo' || 'publicRepo' }}')
        matrix=$(jq --arg publicRepo "$publicRepo" 'map(. | select((.runOn==$publicRepo) or (.runOn=="always")) )' matrix_includes_toolbox.json)
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
      working-directory: .github/
  create_installer:
    if: |
      ${{
        github.event_name == 'pull_request' ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/toolbox/'))
      }}
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    outputs:
      VERSION: ${{ steps.installer.outputs.VERSION }}

    steps:
      - name: Checkout devtools
        uses: actions/checkout@v2

      - name: Create folders
        run: |
          mkdir -p tools/toolbox/cbuild
          mkdir -p tools/toolbox/projmgr
          mkdir -p tools/toolbox/distribution/bin
          mkdir -p tools/toolbox/distribution/etc
          mkdir -p tools/toolbox/distribution/doc/cbuild
          mkdir -p tools/toolbox/distribution/doc/cpackget
          mkdir -p tools/toolbox/distribution/doc/projmgr
          mkdir -p tools/toolbox/distribution/doc/toolbox

      - name: Download cbuild release asset
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "Open-CMSIS-Pack/devtools"
          version: tags/tools/buildmgr/0.10.4
          file: cbuild_install.sh
          target: tools/toolbox/cbuild/cbuild_install.sh
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download projmgr release asset
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "Open-CMSIS-Pack/devtools"
          version: tags/tools/projmgr/0.9.1
          file: projmgr.zip
          target: tools/toolbox/projmgr/projmgr.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip and copy files
        run: |
          sudo chmod +x ./cbuild/cbuild_install.sh
          ./cbuild/cbuild_install.sh -x cbuild
          unzip projmgr/projmgr.zip -d projmgr
          cp -r cbuild/bin/* distribution/bin
          cp -r cbuild/etc/* distribution/etc
          cp -r cbuild/doc/* distribution/doc/cbuild
          cp projmgr/bin/darwin64/csolution distribution/bin/csolution.mac
          cp projmgr/bin/linux64/csolution distribution/bin/csolution.lin
          cp projmgr/bin/windows64/csolution.exe distribution/bin/csolution.exe
          cp -r projmgr/etc/* distribution/etc
          cp -r projmgr/doc/* distribution/doc/projmgr
          cp docs/LICENSE.txt distribution
          cp docs/CMSIS-Toolbox.md distribution/doc/toolbox
        working-directory: tools/toolbox

      - name: Create installer
        id: installer
        run: |
          export VERSION=$(echo ${{ github.ref }} | cut -d/ -f5)
          echo "::set-output name=VERSION::$([ "$VERSION" == "" ] && echo "" || echo "_$VERSION")"
          ./create_installer.sh --input=../distribution --output=. --version=$VERSION
        working-directory: tools/toolbox/installer

      - name: Archive cmsis-toolbox installer
        uses: actions/upload-artifact@v2
        with:
          name: cmsis-toolbox
          path: tools/toolbox/installer/cmsis-toolbox${{ steps.installer.outputs.VERSION }}.sh
          retention-days: 1
          if-no-files-found: error

  release:
    if: ${{ github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/toolbox/') }}
    needs: [ create_installer ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    steps:
      - name: Download cmsis-toolbox installer
        uses: actions/download-artifact@v2
        with:
          name: cmsis-toolbox
          path: ${{ github.workspace }}

      - name: Attach installer to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: cmsis-toolbox${{ needs.create_installer.outputs.VERSION }}.sh
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: cmsis-toolbox${{ needs.create_installer.outputs.VERSION }}.sh

  tests:
    if: |
      ${{
        github.event_name == 'pull_request' ||
        (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/tools/toolbox/'))
      }}
    needs: [ create_installer, matrix_prep ]
    timeout-minutes: 15
    runs-on: ${{ matrix.runs_on }}
    env:
      CI_TOOLBOX_INSTALLER: ${{ github.workspace }}/cmsis-toolbox${{ needs.create_installer.outputs.VERSION }}.sh
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - name: Install macos deps
        if: ${{ startsWith(matrix.runs_on, 'macos') }}
        run: |
          brew install \
            ninja

      - name: Install linux deps
        if: ${{ startsWith(matrix.runs_on, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt-get install \
            bc \
            build-essential \
            ninja-build

      - name: Install windows deps
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        run: choco install -y ninja

      - name: Checkout devtools
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Create build folder
        run: mkdir build

      - name: Configure windows build for amd64
        if: ${{ startsWith(matrix.runs_on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - uses: ammaraskar/gcc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}

      - uses: ammaraskar/msvc-problem-matcher@master
        if: ${{ startsWith(matrix.runs_on, 'windows') }}

      - name: Download cmsis-toolbox installer
        uses: actions/download-artifact@v2
        with:
          name: cmsis-toolbox
          path: ${{ github.workspace }}

      - name: Set correct cmsis-toolbox file permission
        if: ${{ startsWith(matrix.runs_on, 'macos') || startsWith(matrix.runs_on, 'ubuntu') }}
        run: chmod +x cmsis-toolbox${{ needs.create_installer.outputs.VERSION }}.sh

      - name: Build and run Toolbox tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
          cmake --build . --target ToolboxTests
          ctest -V -C Debug -R ToolboxTests
        working-directory: ./build

      - name: Archive tests results
        uses: actions/upload-artifact@v2
        with:
          name: toolboxtest-${{ matrix.target }}
          path: ./build/Testing/Temporary/LastTest.log
          retention-days: 1
          if-no-files-found: error
        if: ${{ always() }}

      - name: Archive gtest report
        uses: actions/upload-artifact@v2
        with:
          name: toolbox_test-${{ matrix.target }}
          path: ./build/test_reports/toolboxtests-*.xml
          retention-days: 1
          if-no-files-found: error
        if: ${{ always() }}

      - name: Publish Toolbox Test Results
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: toolbox_test-${{ matrix.target }}
          report_paths: build/test_reports/toolboxtests-${{ matrix.target }}.xml
